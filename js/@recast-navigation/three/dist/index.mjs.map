{"version":3,"file":"index.mjs","sources":["../../../node_modules/three-stdlib/lines/LineSegmentsGeometry.js","../../../node_modules/three-stdlib/lines/LineMaterial.js","../../../node_modules/three-stdlib/lines/LineSegments2.js","../src/debug/debug-drawer.ts","../src/helpers/crowd-helper.ts","../src/helpers/nav-mesh-helper.ts","../src/helpers/off-mesh-connections-helper.ts","../src/helpers/tile-cache-helper.ts","../src/utils/get-positions-and-indices.ts","../src/utils/generators.ts"],"sourcesContent":["import { Box3, Vector3, InstancedBufferGeometry, Float32BufferAttribute, InstancedInterleavedBuffer, InterleavedBufferAttribute, WireframeGeometry, Sphere } from \"three\";\nconst _box = new Box3();\nconst _vector = new Vector3();\nclass LineSegmentsGeometry extends InstancedBufferGeometry {\n  constructor() {\n    super();\n    this.isLineSegmentsGeometry = true;\n    this.type = \"LineSegmentsGeometry\";\n    const positions = [-1, 2, 0, 1, 2, 0, -1, 1, 0, 1, 1, 0, -1, 0, 0, 1, 0, 0, -1, -1, 0, 1, -1, 0];\n    const uvs = [-1, 2, 1, 2, -1, 1, 1, 1, -1, -1, 1, -1, -1, -2, 1, -2];\n    const index = [0, 2, 1, 2, 3, 1, 2, 4, 3, 4, 5, 3, 4, 6, 5, 6, 7, 5];\n    this.setIndex(index);\n    this.setAttribute(\"position\", new Float32BufferAttribute(positions, 3));\n    this.setAttribute(\"uv\", new Float32BufferAttribute(uvs, 2));\n  }\n  applyMatrix4(matrix) {\n    const start = this.attributes.instanceStart;\n    const end = this.attributes.instanceEnd;\n    if (start !== void 0) {\n      start.applyMatrix4(matrix);\n      end.applyMatrix4(matrix);\n      start.needsUpdate = true;\n    }\n    if (this.boundingBox !== null) {\n      this.computeBoundingBox();\n    }\n    if (this.boundingSphere !== null) {\n      this.computeBoundingSphere();\n    }\n    return this;\n  }\n  setPositions(array) {\n    let lineSegments;\n    if (array instanceof Float32Array) {\n      lineSegments = array;\n    } else if (Array.isArray(array)) {\n      lineSegments = new Float32Array(array);\n    }\n    const instanceBuffer = new InstancedInterleavedBuffer(lineSegments, 6, 1);\n    this.setAttribute(\"instanceStart\", new InterleavedBufferAttribute(instanceBuffer, 3, 0));\n    this.setAttribute(\"instanceEnd\", new InterleavedBufferAttribute(instanceBuffer, 3, 3));\n    this.computeBoundingBox();\n    this.computeBoundingSphere();\n    return this;\n  }\n  setColors(array, itemSize = 3) {\n    let colors;\n    if (array instanceof Float32Array) {\n      colors = array;\n    } else if (Array.isArray(array)) {\n      colors = new Float32Array(array);\n    }\n    const instanceColorBuffer = new InstancedInterleavedBuffer(colors, itemSize * 2, 1);\n    this.setAttribute(\"instanceColorStart\", new InterleavedBufferAttribute(instanceColorBuffer, itemSize, 0));\n    this.setAttribute(\"instanceColorEnd\", new InterleavedBufferAttribute(instanceColorBuffer, itemSize, itemSize));\n    return this;\n  }\n  fromWireframeGeometry(geometry) {\n    this.setPositions(geometry.attributes.position.array);\n    return this;\n  }\n  fromEdgesGeometry(geometry) {\n    this.setPositions(geometry.attributes.position.array);\n    return this;\n  }\n  fromMesh(mesh) {\n    this.fromWireframeGeometry(new WireframeGeometry(mesh.geometry));\n    return this;\n  }\n  fromLineSegments(lineSegments) {\n    const geometry = lineSegments.geometry;\n    this.setPositions(geometry.attributes.position.array);\n    return this;\n  }\n  computeBoundingBox() {\n    if (this.boundingBox === null) {\n      this.boundingBox = new Box3();\n    }\n    const start = this.attributes.instanceStart;\n    const end = this.attributes.instanceEnd;\n    if (start !== void 0 && end !== void 0) {\n      this.boundingBox.setFromBufferAttribute(start);\n      _box.setFromBufferAttribute(end);\n      this.boundingBox.union(_box);\n    }\n  }\n  computeBoundingSphere() {\n    if (this.boundingSphere === null) {\n      this.boundingSphere = new Sphere();\n    }\n    if (this.boundingBox === null) {\n      this.computeBoundingBox();\n    }\n    const start = this.attributes.instanceStart;\n    const end = this.attributes.instanceEnd;\n    if (start !== void 0 && end !== void 0) {\n      const center = this.boundingSphere.center;\n      this.boundingBox.getCenter(center);\n      let maxRadiusSq = 0;\n      for (let i = 0, il = start.count; i < il; i++) {\n        _vector.fromBufferAttribute(start, i);\n        maxRadiusSq = Math.max(maxRadiusSq, center.distanceToSquared(_vector));\n        _vector.fromBufferAttribute(end, i);\n        maxRadiusSq = Math.max(maxRadiusSq, center.distanceToSquared(_vector));\n      }\n      this.boundingSphere.radius = Math.sqrt(maxRadiusSq);\n      if (isNaN(this.boundingSphere.radius)) {\n        console.error(\n          \"THREE.LineSegmentsGeometry.computeBoundingSphere(): Computed radius is NaN. The instanced position data is likely to have NaN values.\",\n          this\n        );\n      }\n    }\n  }\n  toJSON() {\n  }\n  applyMatrix(matrix) {\n    console.warn(\"THREE.LineSegmentsGeometry: applyMatrix() has been renamed to applyMatrix4().\");\n    return this.applyMatrix4(matrix);\n  }\n}\nexport {\n  LineSegmentsGeometry\n};\n//# sourceMappingURL=LineSegmentsGeometry.js.map\n","import { ShaderMaterial, UniformsUtils, UniformsLib, Vector2, REVISION } from \"three\";\nclass LineMaterial extends ShaderMaterial {\n  constructor(parameters) {\n    super({\n      type: \"LineMaterial\",\n      uniforms: UniformsUtils.clone(\n        UniformsUtils.merge([\n          UniformsLib.common,\n          UniformsLib.fog,\n          {\n            worldUnits: { value: 1 },\n            linewidth: { value: 1 },\n            resolution: { value: new Vector2(1, 1) },\n            dashOffset: { value: 0 },\n            dashScale: { value: 1 },\n            dashSize: { value: 1 },\n            gapSize: { value: 1 }\n            // todo FIX - maybe change to totalSize\n          }\n        ])\n      ),\n      vertexShader: (\n        /* glsl */\n        `\n\t\t\t\t#include <common>\n\t\t\t\t#include <fog_pars_vertex>\n\t\t\t\t#include <logdepthbuf_pars_vertex>\n\t\t\t\t#include <clipping_planes_pars_vertex>\n\n\t\t\t\tuniform float linewidth;\n\t\t\t\tuniform vec2 resolution;\n\n\t\t\t\tattribute vec3 instanceStart;\n\t\t\t\tattribute vec3 instanceEnd;\n\n\t\t\t\t#ifdef USE_COLOR\n\t\t\t\t\t#ifdef USE_LINE_COLOR_ALPHA\n\t\t\t\t\t\tvarying vec4 vLineColor;\n\t\t\t\t\t\tattribute vec4 instanceColorStart;\n\t\t\t\t\t\tattribute vec4 instanceColorEnd;\n\t\t\t\t\t#else\n\t\t\t\t\t\tvarying vec3 vLineColor;\n\t\t\t\t\t\tattribute vec3 instanceColorStart;\n\t\t\t\t\t\tattribute vec3 instanceColorEnd;\n\t\t\t\t\t#endif\n\t\t\t\t#endif\n\n\t\t\t\t#ifdef WORLD_UNITS\n\n\t\t\t\t\tvarying vec4 worldPos;\n\t\t\t\t\tvarying vec3 worldStart;\n\t\t\t\t\tvarying vec3 worldEnd;\n\n\t\t\t\t\t#ifdef USE_DASH\n\n\t\t\t\t\t\tvarying vec2 vUv;\n\n\t\t\t\t\t#endif\n\n\t\t\t\t#else\n\n\t\t\t\t\tvarying vec2 vUv;\n\n\t\t\t\t#endif\n\n\t\t\t\t#ifdef USE_DASH\n\n\t\t\t\t\tuniform float dashScale;\n\t\t\t\t\tattribute float instanceDistanceStart;\n\t\t\t\t\tattribute float instanceDistanceEnd;\n\t\t\t\t\tvarying float vLineDistance;\n\n\t\t\t\t#endif\n\n\t\t\t\tvoid trimSegment( const in vec4 start, inout vec4 end ) {\n\n\t\t\t\t\t// trim end segment so it terminates between the camera plane and the near plane\n\n\t\t\t\t\t// conservative estimate of the near plane\n\t\t\t\t\tfloat a = projectionMatrix[ 2 ][ 2 ]; // 3nd entry in 3th column\n\t\t\t\t\tfloat b = projectionMatrix[ 3 ][ 2 ]; // 3nd entry in 4th column\n\t\t\t\t\tfloat nearEstimate = - 0.5 * b / a;\n\n\t\t\t\t\tfloat alpha = ( nearEstimate - start.z ) / ( end.z - start.z );\n\n\t\t\t\t\tend.xyz = mix( start.xyz, end.xyz, alpha );\n\n\t\t\t\t}\n\n\t\t\t\tvoid main() {\n\n\t\t\t\t\t#ifdef USE_COLOR\n\n\t\t\t\t\t\tvLineColor = ( position.y < 0.5 ) ? instanceColorStart : instanceColorEnd;\n\n\t\t\t\t\t#endif\n\n\t\t\t\t\t#ifdef USE_DASH\n\n\t\t\t\t\t\tvLineDistance = ( position.y < 0.5 ) ? dashScale * instanceDistanceStart : dashScale * instanceDistanceEnd;\n\t\t\t\t\t\tvUv = uv;\n\n\t\t\t\t\t#endif\n\n\t\t\t\t\tfloat aspect = resolution.x / resolution.y;\n\n\t\t\t\t\t// camera space\n\t\t\t\t\tvec4 start = modelViewMatrix * vec4( instanceStart, 1.0 );\n\t\t\t\t\tvec4 end = modelViewMatrix * vec4( instanceEnd, 1.0 );\n\n\t\t\t\t\t#ifdef WORLD_UNITS\n\n\t\t\t\t\t\tworldStart = start.xyz;\n\t\t\t\t\t\tworldEnd = end.xyz;\n\n\t\t\t\t\t#else\n\n\t\t\t\t\t\tvUv = uv;\n\n\t\t\t\t\t#endif\n\n\t\t\t\t\t// special case for perspective projection, and segments that terminate either in, or behind, the camera plane\n\t\t\t\t\t// clearly the gpu firmware has a way of addressing this issue when projecting into ndc space\n\t\t\t\t\t// but we need to perform ndc-space calculations in the shader, so we must address this issue directly\n\t\t\t\t\t// perhaps there is a more elegant solution -- WestLangley\n\n\t\t\t\t\tbool perspective = ( projectionMatrix[ 2 ][ 3 ] == - 1.0 ); // 4th entry in the 3rd column\n\n\t\t\t\t\tif ( perspective ) {\n\n\t\t\t\t\t\tif ( start.z < 0.0 && end.z >= 0.0 ) {\n\n\t\t\t\t\t\t\ttrimSegment( start, end );\n\n\t\t\t\t\t\t} else if ( end.z < 0.0 && start.z >= 0.0 ) {\n\n\t\t\t\t\t\t\ttrimSegment( end, start );\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t}\n\n\t\t\t\t\t// clip space\n\t\t\t\t\tvec4 clipStart = projectionMatrix * start;\n\t\t\t\t\tvec4 clipEnd = projectionMatrix * end;\n\n\t\t\t\t\t// ndc space\n\t\t\t\t\tvec3 ndcStart = clipStart.xyz / clipStart.w;\n\t\t\t\t\tvec3 ndcEnd = clipEnd.xyz / clipEnd.w;\n\n\t\t\t\t\t// direction\n\t\t\t\t\tvec2 dir = ndcEnd.xy - ndcStart.xy;\n\n\t\t\t\t\t// account for clip-space aspect ratio\n\t\t\t\t\tdir.x *= aspect;\n\t\t\t\t\tdir = normalize( dir );\n\n\t\t\t\t\t#ifdef WORLD_UNITS\n\n\t\t\t\t\t\t// get the offset direction as perpendicular to the view vector\n\t\t\t\t\t\tvec3 worldDir = normalize( end.xyz - start.xyz );\n\t\t\t\t\t\tvec3 offset;\n\t\t\t\t\t\tif ( position.y < 0.5 ) {\n\n\t\t\t\t\t\t\toffset = normalize( cross( start.xyz, worldDir ) );\n\n\t\t\t\t\t\t} else {\n\n\t\t\t\t\t\t\toffset = normalize( cross( end.xyz, worldDir ) );\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\t// sign flip\n\t\t\t\t\t\tif ( position.x < 0.0 ) offset *= - 1.0;\n\n\t\t\t\t\t\tfloat forwardOffset = dot( worldDir, vec3( 0.0, 0.0, 1.0 ) );\n\n\t\t\t\t\t\t// don't extend the line if we're rendering dashes because we\n\t\t\t\t\t\t// won't be rendering the endcaps\n\t\t\t\t\t\t#ifndef USE_DASH\n\n\t\t\t\t\t\t\t// extend the line bounds to encompass  endcaps\n\t\t\t\t\t\t\tstart.xyz += - worldDir * linewidth * 0.5;\n\t\t\t\t\t\t\tend.xyz += worldDir * linewidth * 0.5;\n\n\t\t\t\t\t\t\t// shift the position of the quad so it hugs the forward edge of the line\n\t\t\t\t\t\t\toffset.xy -= dir * forwardOffset;\n\t\t\t\t\t\t\toffset.z += 0.5;\n\n\t\t\t\t\t\t#endif\n\n\t\t\t\t\t\t// endcaps\n\t\t\t\t\t\tif ( position.y > 1.0 || position.y < 0.0 ) {\n\n\t\t\t\t\t\t\toffset.xy += dir * 2.0 * forwardOffset;\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\t// adjust for linewidth\n\t\t\t\t\t\toffset *= linewidth * 0.5;\n\n\t\t\t\t\t\t// set the world position\n\t\t\t\t\t\tworldPos = ( position.y < 0.5 ) ? start : end;\n\t\t\t\t\t\tworldPos.xyz += offset;\n\n\t\t\t\t\t\t// project the worldpos\n\t\t\t\t\t\tvec4 clip = projectionMatrix * worldPos;\n\n\t\t\t\t\t\t// shift the depth of the projected points so the line\n\t\t\t\t\t\t// segments overlap neatly\n\t\t\t\t\t\tvec3 clipPose = ( position.y < 0.5 ) ? ndcStart : ndcEnd;\n\t\t\t\t\t\tclip.z = clipPose.z * clip.w;\n\n\t\t\t\t\t#else\n\n\t\t\t\t\t\tvec2 offset = vec2( dir.y, - dir.x );\n\t\t\t\t\t\t// undo aspect ratio adjustment\n\t\t\t\t\t\tdir.x /= aspect;\n\t\t\t\t\t\toffset.x /= aspect;\n\n\t\t\t\t\t\t// sign flip\n\t\t\t\t\t\tif ( position.x < 0.0 ) offset *= - 1.0;\n\n\t\t\t\t\t\t// endcaps\n\t\t\t\t\t\tif ( position.y < 0.0 ) {\n\n\t\t\t\t\t\t\toffset += - dir;\n\n\t\t\t\t\t\t} else if ( position.y > 1.0 ) {\n\n\t\t\t\t\t\t\toffset += dir;\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\t// adjust for linewidth\n\t\t\t\t\t\toffset *= linewidth;\n\n\t\t\t\t\t\t// adjust for clip-space to screen-space conversion // maybe resolution should be based on viewport ...\n\t\t\t\t\t\toffset /= resolution.y;\n\n\t\t\t\t\t\t// select end\n\t\t\t\t\t\tvec4 clip = ( position.y < 0.5 ) ? clipStart : clipEnd;\n\n\t\t\t\t\t\t// back to clip space\n\t\t\t\t\t\toffset *= clip.w;\n\n\t\t\t\t\t\tclip.xy += offset;\n\n\t\t\t\t\t#endif\n\n\t\t\t\t\tgl_Position = clip;\n\n\t\t\t\t\tvec4 mvPosition = ( position.y < 0.5 ) ? start : end; // this is an approximation\n\n\t\t\t\t\t#include <logdepthbuf_vertex>\n\t\t\t\t\t#include <clipping_planes_vertex>\n\t\t\t\t\t#include <fog_vertex>\n\n\t\t\t\t}\n\t\t\t`\n      ),\n      fragmentShader: (\n        /* glsl */\n        `\n\t\t\t\tuniform vec3 diffuse;\n\t\t\t\tuniform float opacity;\n\t\t\t\tuniform float linewidth;\n\n\t\t\t\t#ifdef USE_DASH\n\n\t\t\t\t\tuniform float dashOffset;\n\t\t\t\t\tuniform float dashSize;\n\t\t\t\t\tuniform float gapSize;\n\n\t\t\t\t#endif\n\n\t\t\t\tvarying float vLineDistance;\n\n\t\t\t\t#ifdef WORLD_UNITS\n\n\t\t\t\t\tvarying vec4 worldPos;\n\t\t\t\t\tvarying vec3 worldStart;\n\t\t\t\t\tvarying vec3 worldEnd;\n\n\t\t\t\t\t#ifdef USE_DASH\n\n\t\t\t\t\t\tvarying vec2 vUv;\n\n\t\t\t\t\t#endif\n\n\t\t\t\t#else\n\n\t\t\t\t\tvarying vec2 vUv;\n\n\t\t\t\t#endif\n\n\t\t\t\t#include <common>\n\t\t\t\t#include <fog_pars_fragment>\n\t\t\t\t#include <logdepthbuf_pars_fragment>\n\t\t\t\t#include <clipping_planes_pars_fragment>\n\n\t\t\t\t#ifdef USE_COLOR\n\t\t\t\t\t#ifdef USE_LINE_COLOR_ALPHA\n\t\t\t\t\t\tvarying vec4 vLineColor;\n\t\t\t\t\t#else\n\t\t\t\t\t\tvarying vec3 vLineColor;\n\t\t\t\t\t#endif\n\t\t\t\t#endif\n\n\t\t\t\tvec2 closestLineToLine(vec3 p1, vec3 p2, vec3 p3, vec3 p4) {\n\n\t\t\t\t\tfloat mua;\n\t\t\t\t\tfloat mub;\n\n\t\t\t\t\tvec3 p13 = p1 - p3;\n\t\t\t\t\tvec3 p43 = p4 - p3;\n\n\t\t\t\t\tvec3 p21 = p2 - p1;\n\n\t\t\t\t\tfloat d1343 = dot( p13, p43 );\n\t\t\t\t\tfloat d4321 = dot( p43, p21 );\n\t\t\t\t\tfloat d1321 = dot( p13, p21 );\n\t\t\t\t\tfloat d4343 = dot( p43, p43 );\n\t\t\t\t\tfloat d2121 = dot( p21, p21 );\n\n\t\t\t\t\tfloat denom = d2121 * d4343 - d4321 * d4321;\n\n\t\t\t\t\tfloat numer = d1343 * d4321 - d1321 * d4343;\n\n\t\t\t\t\tmua = numer / denom;\n\t\t\t\t\tmua = clamp( mua, 0.0, 1.0 );\n\t\t\t\t\tmub = ( d1343 + d4321 * ( mua ) ) / d4343;\n\t\t\t\t\tmub = clamp( mub, 0.0, 1.0 );\n\n\t\t\t\t\treturn vec2( mua, mub );\n\n\t\t\t\t}\n\n\t\t\t\tvoid main() {\n\n\t\t\t\t\t#include <clipping_planes_fragment>\n\n\t\t\t\t\t#ifdef USE_DASH\n\n\t\t\t\t\t\tif ( vUv.y < - 1.0 || vUv.y > 1.0 ) discard; // discard endcaps\n\n\t\t\t\t\t\tif ( mod( vLineDistance + dashOffset, dashSize + gapSize ) > dashSize ) discard; // todo - FIX\n\n\t\t\t\t\t#endif\n\n\t\t\t\t\tfloat alpha = opacity;\n\n\t\t\t\t\t#ifdef WORLD_UNITS\n\n\t\t\t\t\t\t// Find the closest points on the view ray and the line segment\n\t\t\t\t\t\tvec3 rayEnd = normalize( worldPos.xyz ) * 1e5;\n\t\t\t\t\t\tvec3 lineDir = worldEnd - worldStart;\n\t\t\t\t\t\tvec2 params = closestLineToLine( worldStart, worldEnd, vec3( 0.0, 0.0, 0.0 ), rayEnd );\n\n\t\t\t\t\t\tvec3 p1 = worldStart + lineDir * params.x;\n\t\t\t\t\t\tvec3 p2 = rayEnd * params.y;\n\t\t\t\t\t\tvec3 delta = p1 - p2;\n\t\t\t\t\t\tfloat len = length( delta );\n\t\t\t\t\t\tfloat norm = len / linewidth;\n\n\t\t\t\t\t\t#ifndef USE_DASH\n\n\t\t\t\t\t\t\t#ifdef USE_ALPHA_TO_COVERAGE\n\n\t\t\t\t\t\t\t\tfloat dnorm = fwidth( norm );\n\t\t\t\t\t\t\t\talpha = 1.0 - smoothstep( 0.5 - dnorm, 0.5 + dnorm, norm );\n\n\t\t\t\t\t\t\t#else\n\n\t\t\t\t\t\t\t\tif ( norm > 0.5 ) {\n\n\t\t\t\t\t\t\t\t\tdiscard;\n\n\t\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\t#endif\n\n\t\t\t\t\t\t#endif\n\n\t\t\t\t\t#else\n\n\t\t\t\t\t\t#ifdef USE_ALPHA_TO_COVERAGE\n\n\t\t\t\t\t\t\t// artifacts appear on some hardware if a derivative is taken within a conditional\n\t\t\t\t\t\t\tfloat a = vUv.x;\n\t\t\t\t\t\t\tfloat b = ( vUv.y > 0.0 ) ? vUv.y - 1.0 : vUv.y + 1.0;\n\t\t\t\t\t\t\tfloat len2 = a * a + b * b;\n\t\t\t\t\t\t\tfloat dlen = fwidth( len2 );\n\n\t\t\t\t\t\t\tif ( abs( vUv.y ) > 1.0 ) {\n\n\t\t\t\t\t\t\t\talpha = 1.0 - smoothstep( 1.0 - dlen, 1.0 + dlen, len2 );\n\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t#else\n\n\t\t\t\t\t\t\tif ( abs( vUv.y ) > 1.0 ) {\n\n\t\t\t\t\t\t\t\tfloat a = vUv.x;\n\t\t\t\t\t\t\t\tfloat b = ( vUv.y > 0.0 ) ? vUv.y - 1.0 : vUv.y + 1.0;\n\t\t\t\t\t\t\t\tfloat len2 = a * a + b * b;\n\n\t\t\t\t\t\t\t\tif ( len2 > 1.0 ) discard;\n\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t#endif\n\n\t\t\t\t\t#endif\n\n\t\t\t\t\tvec4 diffuseColor = vec4( diffuse, alpha );\n\t\t\t\t\t#ifdef USE_COLOR\n\t\t\t\t\t\t#ifdef USE_LINE_COLOR_ALPHA\n\t\t\t\t\t\t\tdiffuseColor *= vLineColor;\n\t\t\t\t\t\t#else\n\t\t\t\t\t\t\tdiffuseColor.rgb *= vLineColor;\n\t\t\t\t\t\t#endif\n\t\t\t\t\t#endif\n\n\t\t\t\t\t#include <logdepthbuf_fragment>\n\n\t\t\t\t\tgl_FragColor = diffuseColor;\n\n\t\t\t\t\t#include <tonemapping_fragment>\n\t\t\t\t\t#include <${parseInt(REVISION.replace(/\\D+/g, \"\")) >= 154 ? \"colorspace_fragment\" : \"encodings_fragment\"}>\n\t\t\t\t\t#include <fog_fragment>\n\t\t\t\t\t#include <premultiplied_alpha_fragment>\n\n\t\t\t\t}\n\t\t\t`\n      ),\n      clipping: true\n      // required for clipping support\n    });\n    this.isLineMaterial = true;\n    this.onBeforeCompile = function() {\n      if (this.transparent) {\n        this.defines.USE_LINE_COLOR_ALPHA = \"1\";\n      } else {\n        delete this.defines.USE_LINE_COLOR_ALPHA;\n      }\n    };\n    Object.defineProperties(this, {\n      color: {\n        enumerable: true,\n        get: function() {\n          return this.uniforms.diffuse.value;\n        },\n        set: function(value) {\n          this.uniforms.diffuse.value = value;\n        }\n      },\n      worldUnits: {\n        enumerable: true,\n        get: function() {\n          return \"WORLD_UNITS\" in this.defines;\n        },\n        set: function(value) {\n          if (value === true) {\n            this.defines.WORLD_UNITS = \"\";\n          } else {\n            delete this.defines.WORLD_UNITS;\n          }\n        }\n      },\n      linewidth: {\n        enumerable: true,\n        get: function() {\n          return this.uniforms.linewidth.value;\n        },\n        set: function(value) {\n          this.uniforms.linewidth.value = value;\n        }\n      },\n      dashed: {\n        enumerable: true,\n        get: function() {\n          return Boolean(\"USE_DASH\" in this.defines);\n        },\n        set(value) {\n          if (Boolean(value) !== Boolean(\"USE_DASH\" in this.defines)) {\n            this.needsUpdate = true;\n          }\n          if (value === true) {\n            this.defines.USE_DASH = \"\";\n          } else {\n            delete this.defines.USE_DASH;\n          }\n        }\n      },\n      dashScale: {\n        enumerable: true,\n        get: function() {\n          return this.uniforms.dashScale.value;\n        },\n        set: function(value) {\n          this.uniforms.dashScale.value = value;\n        }\n      },\n      dashSize: {\n        enumerable: true,\n        get: function() {\n          return this.uniforms.dashSize.value;\n        },\n        set: function(value) {\n          this.uniforms.dashSize.value = value;\n        }\n      },\n      dashOffset: {\n        enumerable: true,\n        get: function() {\n          return this.uniforms.dashOffset.value;\n        },\n        set: function(value) {\n          this.uniforms.dashOffset.value = value;\n        }\n      },\n      gapSize: {\n        enumerable: true,\n        get: function() {\n          return this.uniforms.gapSize.value;\n        },\n        set: function(value) {\n          this.uniforms.gapSize.value = value;\n        }\n      },\n      opacity: {\n        enumerable: true,\n        get: function() {\n          return this.uniforms.opacity.value;\n        },\n        set: function(value) {\n          this.uniforms.opacity.value = value;\n        }\n      },\n      resolution: {\n        enumerable: true,\n        get: function() {\n          return this.uniforms.resolution.value;\n        },\n        set: function(value) {\n          this.uniforms.resolution.value.copy(value);\n        }\n      },\n      alphaToCoverage: {\n        enumerable: true,\n        get: function() {\n          return Boolean(\"USE_ALPHA_TO_COVERAGE\" in this.defines);\n        },\n        set: function(value) {\n          if (Boolean(value) !== Boolean(\"USE_ALPHA_TO_COVERAGE\" in this.defines)) {\n            this.needsUpdate = true;\n          }\n          if (value === true) {\n            this.defines.USE_ALPHA_TO_COVERAGE = \"\";\n            this.extensions.derivatives = true;\n          } else {\n            delete this.defines.USE_ALPHA_TO_COVERAGE;\n            this.extensions.derivatives = false;\n          }\n        }\n      }\n    });\n    this.setValues(parameters);\n  }\n}\nexport {\n  LineMaterial\n};\n//# sourceMappingURL=LineMaterial.js.map\n","import { Vector3, Vector4, Matrix4, Line3, Box3, Sphere, Mesh, InstancedInterleavedBuffer, InterleavedBufferAttribute, MathUtils } from \"three\";\nimport { LineSegmentsGeometry } from \"./LineSegmentsGeometry.js\";\nimport { LineMaterial } from \"./LineMaterial.js\";\nconst _start = new Vector3();\nconst _end = new Vector3();\nconst _start4 = new Vector4();\nconst _end4 = new Vector4();\nconst _ssOrigin = new Vector4();\nconst _ssOrigin3 = new Vector3();\nconst _mvMatrix = new Matrix4();\nconst _line = new Line3();\nconst _closestPoint = new Vector3();\nconst _box = new Box3();\nconst _sphere = new Sphere();\nconst _clipToWorldVector = new Vector4();\nlet _ray, _instanceStart, _instanceEnd, _lineWidth;\nfunction getWorldSpaceHalfWidth(camera, distance, resolution) {\n  _clipToWorldVector.set(0, 0, -distance, 1).applyMatrix4(camera.projectionMatrix);\n  _clipToWorldVector.multiplyScalar(1 / _clipToWorldVector.w);\n  _clipToWorldVector.x = _lineWidth / resolution.width;\n  _clipToWorldVector.y = _lineWidth / resolution.height;\n  _clipToWorldVector.applyMatrix4(camera.projectionMatrixInverse);\n  _clipToWorldVector.multiplyScalar(1 / _clipToWorldVector.w);\n  return Math.abs(Math.max(_clipToWorldVector.x, _clipToWorldVector.y));\n}\nfunction raycastWorldUnits(lineSegments, intersects) {\n  for (let i = 0, l = _instanceStart.count; i < l; i++) {\n    _line.start.fromBufferAttribute(_instanceStart, i);\n    _line.end.fromBufferAttribute(_instanceEnd, i);\n    const pointOnLine = new Vector3();\n    const point = new Vector3();\n    _ray.distanceSqToSegment(_line.start, _line.end, point, pointOnLine);\n    const isInside = point.distanceTo(pointOnLine) < _lineWidth * 0.5;\n    if (isInside) {\n      intersects.push({\n        point,\n        pointOnLine,\n        distance: _ray.origin.distanceTo(point),\n        object: lineSegments,\n        face: null,\n        faceIndex: i,\n        uv: null,\n        uv2: null\n      });\n    }\n  }\n}\nfunction raycastScreenSpace(lineSegments, camera, intersects) {\n  const projectionMatrix = camera.projectionMatrix;\n  const material = lineSegments.material;\n  const resolution = material.resolution;\n  const matrixWorld = lineSegments.matrixWorld;\n  const geometry = lineSegments.geometry;\n  const instanceStart = geometry.attributes.instanceStart;\n  const instanceEnd = geometry.attributes.instanceEnd;\n  const near = -camera.near;\n  _ray.at(1, _ssOrigin);\n  _ssOrigin.w = 1;\n  _ssOrigin.applyMatrix4(camera.matrixWorldInverse);\n  _ssOrigin.applyMatrix4(projectionMatrix);\n  _ssOrigin.multiplyScalar(1 / _ssOrigin.w);\n  _ssOrigin.x *= resolution.x / 2;\n  _ssOrigin.y *= resolution.y / 2;\n  _ssOrigin.z = 0;\n  _ssOrigin3.copy(_ssOrigin);\n  _mvMatrix.multiplyMatrices(camera.matrixWorldInverse, matrixWorld);\n  for (let i = 0, l = instanceStart.count; i < l; i++) {\n    _start4.fromBufferAttribute(instanceStart, i);\n    _end4.fromBufferAttribute(instanceEnd, i);\n    _start4.w = 1;\n    _end4.w = 1;\n    _start4.applyMatrix4(_mvMatrix);\n    _end4.applyMatrix4(_mvMatrix);\n    const isBehindCameraNear = _start4.z > near && _end4.z > near;\n    if (isBehindCameraNear) {\n      continue;\n    }\n    if (_start4.z > near) {\n      const deltaDist = _start4.z - _end4.z;\n      const t = (_start4.z - near) / deltaDist;\n      _start4.lerp(_end4, t);\n    } else if (_end4.z > near) {\n      const deltaDist = _end4.z - _start4.z;\n      const t = (_end4.z - near) / deltaDist;\n      _end4.lerp(_start4, t);\n    }\n    _start4.applyMatrix4(projectionMatrix);\n    _end4.applyMatrix4(projectionMatrix);\n    _start4.multiplyScalar(1 / _start4.w);\n    _end4.multiplyScalar(1 / _end4.w);\n    _start4.x *= resolution.x / 2;\n    _start4.y *= resolution.y / 2;\n    _end4.x *= resolution.x / 2;\n    _end4.y *= resolution.y / 2;\n    _line.start.copy(_start4);\n    _line.start.z = 0;\n    _line.end.copy(_end4);\n    _line.end.z = 0;\n    const param = _line.closestPointToPointParameter(_ssOrigin3, true);\n    _line.at(param, _closestPoint);\n    const zPos = MathUtils.lerp(_start4.z, _end4.z, param);\n    const isInClipSpace = zPos >= -1 && zPos <= 1;\n    const isInside = _ssOrigin3.distanceTo(_closestPoint) < _lineWidth * 0.5;\n    if (isInClipSpace && isInside) {\n      _line.start.fromBufferAttribute(instanceStart, i);\n      _line.end.fromBufferAttribute(instanceEnd, i);\n      _line.start.applyMatrix4(matrixWorld);\n      _line.end.applyMatrix4(matrixWorld);\n      const pointOnLine = new Vector3();\n      const point = new Vector3();\n      _ray.distanceSqToSegment(_line.start, _line.end, point, pointOnLine);\n      intersects.push({\n        point,\n        pointOnLine,\n        distance: _ray.origin.distanceTo(point),\n        object: lineSegments,\n        face: null,\n        faceIndex: i,\n        uv: null,\n        uv2: null\n      });\n    }\n  }\n}\nclass LineSegments2 extends Mesh {\n  constructor(geometry = new LineSegmentsGeometry(), material = new LineMaterial({ color: Math.random() * 16777215 })) {\n    super(geometry, material);\n    this.isLineSegments2 = true;\n    this.type = \"LineSegments2\";\n  }\n  // for backwards-compatibility, but could be a method of LineSegmentsGeometry...\n  computeLineDistances() {\n    const geometry = this.geometry;\n    const instanceStart = geometry.attributes.instanceStart;\n    const instanceEnd = geometry.attributes.instanceEnd;\n    const lineDistances = new Float32Array(2 * instanceStart.count);\n    for (let i = 0, j = 0, l = instanceStart.count; i < l; i++, j += 2) {\n      _start.fromBufferAttribute(instanceStart, i);\n      _end.fromBufferAttribute(instanceEnd, i);\n      lineDistances[j] = j === 0 ? 0 : lineDistances[j - 1];\n      lineDistances[j + 1] = lineDistances[j] + _start.distanceTo(_end);\n    }\n    const instanceDistanceBuffer = new InstancedInterleavedBuffer(lineDistances, 2, 1);\n    geometry.setAttribute(\"instanceDistanceStart\", new InterleavedBufferAttribute(instanceDistanceBuffer, 1, 0));\n    geometry.setAttribute(\"instanceDistanceEnd\", new InterleavedBufferAttribute(instanceDistanceBuffer, 1, 1));\n    return this;\n  }\n  raycast(raycaster, intersects) {\n    const worldUnits = this.material.worldUnits;\n    const camera = raycaster.camera;\n    if (camera === null && !worldUnits) {\n      console.error(\n        'LineSegments2: \"Raycaster.camera\" needs to be set in order to raycast against LineSegments2 while worldUnits is set to false.'\n      );\n    }\n    const threshold = raycaster.params.Line2 !== void 0 ? raycaster.params.Line2.threshold || 0 : 0;\n    _ray = raycaster.ray;\n    const matrixWorld = this.matrixWorld;\n    const geometry = this.geometry;\n    const material = this.material;\n    _lineWidth = material.linewidth + threshold;\n    _instanceStart = geometry.attributes.instanceStart;\n    _instanceEnd = geometry.attributes.instanceEnd;\n    if (geometry.boundingSphere === null) {\n      geometry.computeBoundingSphere();\n    }\n    _sphere.copy(geometry.boundingSphere).applyMatrix4(matrixWorld);\n    let sphereMargin;\n    if (worldUnits) {\n      sphereMargin = _lineWidth * 0.5;\n    } else {\n      const distanceToSphere = Math.max(camera.near, _sphere.distanceToPoint(_ray.origin));\n      sphereMargin = getWorldSpaceHalfWidth(camera, distanceToSphere, material.resolution);\n    }\n    _sphere.radius += sphereMargin;\n    if (_ray.intersectsSphere(_sphere) === false) {\n      return;\n    }\n    if (geometry.boundingBox === null) {\n      geometry.computeBoundingBox();\n    }\n    _box.copy(geometry.boundingBox).applyMatrix4(matrixWorld);\n    let boxMargin;\n    if (worldUnits) {\n      boxMargin = _lineWidth * 0.5;\n    } else {\n      const distanceToBox = Math.max(camera.near, _box.distanceToPoint(_ray.origin));\n      boxMargin = getWorldSpaceHalfWidth(camera, distanceToBox, material.resolution);\n    }\n    _box.expandByScalar(boxMargin);\n    if (_ray.intersectsBox(_box) === false) {\n      return;\n    }\n    if (worldUnits) {\n      raycastWorldUnits(this, intersects);\n    } else {\n      raycastScreenSpace(this, camera, intersects);\n    }\n  }\n}\nexport {\n  LineSegments2\n};\n//# sourceMappingURL=LineSegments2.js.map\n",null,null,null,null,null,null,null],"names":["_box","Box3","_vector","Vector3","LineSegmentsGeometry","InstancedBufferGeometry","constructor","super","this","isLineSegmentsGeometry","type","setIndex","setAttribute","Float32BufferAttribute","applyMatrix4","matrix","start","attributes","instanceStart","end","instanceEnd","needsUpdate","boundingBox","computeBoundingBox","boundingSphere","computeBoundingSphere","setPositions","array","lineSegments","Float32Array","Array","isArray","instanceBuffer","InstancedInterleavedBuffer","InterleavedBufferAttribute","setColors","itemSize","colors","instanceColorBuffer","fromWireframeGeometry","geometry","position","fromEdgesGeometry","fromMesh","mesh","WireframeGeometry","fromLineSegments","setFromBufferAttribute","union","Sphere","center","getCenter","maxRadiusSq","i","il","count","fromBufferAttribute","Math","max","distanceToSquared","radius","sqrt","isNaN","console","error","toJSON","applyMatrix","warn","LineMaterial","ShaderMaterial","parameters","uniforms","UniformsUtils","clone","merge","UniformsLib","common","fog","worldUnits","value","linewidth","resolution","Vector2","dashOffset","dashScale","dashSize","gapSize","vertexShader","fragmentShader","parseInt","REVISION","replace","clipping","isLineMaterial","onBeforeCompile","transparent","defines","USE_LINE_COLOR_ALPHA","Object","defineProperties","color","enumerable","get","diffuse","set","WORLD_UNITS","dashed","Boolean","USE_DASH","opacity","copy","alphaToCoverage","USE_ALPHA_TO_COVERAGE","extensions","derivatives","setValues","_start","_end","_start4","Vector4","_end4","_ssOrigin","_ssOrigin3","_mvMatrix","Matrix4","_line","Line3","_closestPoint","_sphere","_clipToWorldVector","_ray","_instanceStart","_instanceEnd","_lineWidth","getWorldSpaceHalfWidth","camera","distance","projectionMatrix","multiplyScalar","w","x","width","y","height","projectionMatrixInverse","abs","LineSegments2","Mesh","material","random","isLineSegments2","computeLineDistances","lineDistances","j","l","distanceTo","instanceDistanceBuffer","raycast","raycaster","intersects","threshold","params","Line2","ray","matrixWorld","sphereMargin","boxMargin","near","distanceToPoint","origin","intersectsSphere","expandByScalar","intersectsBox","pointOnLine","point","distanceSqToSegment","push","object","face","faceIndex","uv","uv2","raycastWorldUnits","at","matrixWorldInverse","z","multiplyMatrices","deltaDist","t","lerp","param","closestPointToPointParameter","zPos","MathUtils","isInClipSpace","isInside","raycastScreenSpace","_color","THREE","Color","DebugDrawer","Group","pointGeometry","SphereGeometry","currentVertices","currentPrimitive","triMaterial","pointMaterial","lineMaterial","MeshBasicMaterial","vertexColors","depthWrite","debugDrawImpl","Raw","Module","DebugDrawImpl","handleBegin","primitive","_size","handleDepthMask","_state","handleTexture","handleVertexWithColor","vertex","handleVertexWithColorAndUV","_u","_v","handleEnd","DU_DRAW_LINES","endLines","DU_DRAW_TRIS","endTris","DU_DRAW_QUADS","endQuads","DU_DRAW_POINTS","endPoints","drawHeightfieldSolid","hf","RecastDebugDraw","debugDrawHeightfieldSolid","raw","drawHeightfieldWalkable","debugDrawHeightfieldWalkable","drawCompactHeightfieldSolid","chf","debugDrawCompactHeightfieldSolid","drawCompactHeightfieldRegions","debugDrawCompactHeightfieldRegions","drawCompactHeightfieldDistance","debugDrawCompactHeightfieldDistance","drawHeightfieldLayer","layer","idx","debugDrawHeightfieldLayer","drawHeightfieldLayers","lset","debugDrawHeightfieldLayers","drawRegionConnections","cset","alpha","debugDrawRegionConnections","drawRawContours","debugDrawRawContours","drawContours","debugDrawContours","drawPolyMesh","debugDrawPolyMesh","drawPolyMeshDetail","dmesh","debugDrawPolyMeshDetail","drawNavMesh","flags","DetourDebugDraw","debugDrawNavMesh","getNavMesh","drawNavMeshWithClosedList","query","debugDrawNavMeshWithClosedList","m_navMesh","m_navQuery","drawNavMeshNodes","debugDrawNavMeshNodes","drawNavMeshBVTree","debugDrawNavMeshBVTree","drawNavMeshPortals","debugDrawNavMeshPortals","drawNavMeshPolysWithFlags","col","debugDrawNavMeshPolysWithFlags","drawNavMeshPoly","ref","debugDrawNavMeshPoly","resize","reset","child","children","dispose","clear","destroy","r","g","b","a","instancedMesh","InstancedMesh","length","setMatrixAt","setPosition","setColorAt","setRGB","instanceMatrix","add","lineSegmentsGeometry","positions","p1","p2","BufferGeometry","BufferAttribute","vertices","CrowdHelper","Object3D","agentMeshes","Map","crowd","agentMaterial","recastCrowd","update","agents","getAgents","unseen","Set","keys","agent","delete","agentIndex","velocity","agentMesh","undefined","createAgentMesh","updateAgentGeometry","lookAt","agentId","remove","userData","agentParams","CylinderGeometry","NavMeshHelper","navMesh","navMeshMaterial","indices","getDebugNavMesh","from","Uint32Array","computeVertexNormals","OffMeshConnectionsHelper","offMeshConnections","entryCircleMaterial","exitCircleMaterial","LineBasicMaterial","offMeshConnection","circleGeometry","CircleGeometry","startMesh","startPosition","rotation","PI","endMesh","bidirectional","endPosition","middle","addVectors","curvePoints","CatmullRomCurve3","getPoints","lineGeometry","setFromPoints","line","Line","TileCacheHelper","obstacleMeshes","tileCache","obstacleMaterial","wireframe","wireframeLinewidth","obstacle","obstacles","obstacleMesh","halfExtents","angle","BoxGeometry","Error","tmpVec3","getPositionsAndIndices","meshes","meshesToMerge","positionAttribute","meshToMerge","index","getIndex","ascendingIndex","mergedPositions","mergedIndices","positionToIndex","indexCounter","updateMatrixWorld","pt","pos","localToWorld","key","threeToSoloNavMesh","navMeshGeneratorConfig","keepIntermediates","generateSoloNavMesh","threeToTiledNavMesh","generateTiledNavMesh","threeToTileCache","generateTileCache"],"mappings":"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","x_google_ignoreList":[0,1,2]}