const e=["Recast","Detour","DetourNavMeshBuilder","DetourTileCacheBuilder","NavMeshImporter","NavMeshExporter","CrowdUtils","ChunkyTriMeshUtils","RecastDebugDraw","DetourDebugDraw"],t=["rcConfig","rcContext","dtNavMeshParams","dtNavMeshCreateParams","RecastLinearAllocator","RecastFastLZCompressor","rcChunkyTriMesh","dtTileCacheParams","dtTileCacheLayerHeader","Vec3","BoolRef","IntRef","UnsignedIntRef","UnsignedCharRef","UnsignedShortRef","FloatRef","IntArray","UnsignedIntArray","UnsignedCharArray","UnsignedShortArray","FloatArray"],r={isNull:e=>0===r.Module.getPointer(e),destroy:e=>{r.Module.destroy(e)}},s={},a={},i=async i=>{if(void 0===r.Module){if(i)r.Module=await i();else{const e=(await import("@recast-navigation/wasm")).default;r.Module=await e()}for(const t of e)r[t]=new r.Module[t];for(const e of t)r[e]=r.Module[e];s.RC_BORDER_REG=r.Recast.BORDER_REG,s.RC_MULTIPLE_REGS=r.Recast.MULTIPLE_REGS,s.RC_BORDER_VERTEX=r.Recast.BORDER_VERTEX,s.RC_AREA_BORDER=r.Recast.AREA_BORDER,s.RC_CONTOUR_REG_MASK=r.Recast.CONTOUR_REG_MASK,s.RC_MESH_NULL_IDX=r.Recast.MESH_NULL_IDX,s.RC_NULL_AREA=r.Recast.NULL_AREA,s.RC_WALKABLE_AREA=r.Recast.WALKABLE_AREA,s.RC_NOT_CONNECTED=r.Recast.NOT_CONNECTED,s.RC_CONTOUR_TESS_WALL_EDGES=r.Module.RC_CONTOUR_TESS_WALL_EDGES,s.RC_CONTOUR_TESS_AREA_EDGES=r.Module.RC_CONTOUR_TESS_AREA_EDGES,s.RC_LOG_PROGRESS=r.Module.RC_LOG_PROGRESS,s.RC_LOG_WARNING=r.Module.RC_LOG_WARNING,s.RC_LOG_ERROR=r.Module.RC_LOG_ERROR,s.RC_TIMER_TOTAL=r.Module.RC_TIMER_TOTAL,s.RC_TIMER_TEMP=r.Module.RC_TIMER_TEMP,s.RC_TIMER_RASTERIZE_TRIANGLES=r.Module.RC_TIMER_RASTERIZE_TRIANGLES,s.RC_TIMER_BUILD_COMPACTHEIGHTFIELD=r.Module.RC_TIMER_BUILD_COMPACTHEIGHTFIELD,s.RC_TIMER_BUILD_CONTOURS=r.Module.RC_TIMER_BUILD_CONTOURS,s.RC_TIMER_BUILD_CONTOURS_TRACE=r.Module.RC_TIMER_BUILD_CONTOURS_TRACE,s.RC_TIMER_BUILD_CONTOURS_SIMPLIFY=r.Module.RC_TIMER_BUILD_CONTOURS_SIMPLIFY,s.RC_TIMER_FILTER_BORDER=r.Module.RC_TIMER_FILTER_BORDER,s.RC_TIMER_FILTER_WALKABLE=r.Module.RC_TIMER_FILTER_WALKABLE,s.RC_TIMER_MEDIAN_AREA=r.Module.RC_TIMER_MEDIAN_AREA,s.RC_TIMER_FILTER_LOW_OBSTACLES=r.Module.RC_TIMER_FILTER_LOW_OBSTACLES,s.RC_TIMER_BUILD_POLYMESH=r.Module.RC_TIMER_BUILD_POLYMESH,s.RC_TIMER_MERGE_POLYMESH=r.Module.RC_TIMER_MERGE_POLYMESH,s.RC_TIMER_ERODE_AREA=r.Module.RC_TIMER_ERODE_AREA,s.RC_TIMER_MARK_BOX_AREA=r.Module.RC_TIMER_MARK_BOX_AREA,s.RC_TIMER_MARK_CYLINDER_AREA=r.Module.RC_TIMER_MARK_CYLINDER_AREA,s.RC_TIMER_MARK_CONVEXPOLY_AREA=r.Module.RC_TIMER_MARK_CONVEXPOLY_AREA,s.RC_TIMER_BUILD_DISTANCEFIELD=r.Module.RC_TIMER_BUILD_DISTANCEFIELD,s.RC_TIMER_BUILD_DISTANCEFIELD_DIST=r.Module.RC_TIMER_BUILD_DISTANCEFIELD_DIST,s.RC_TIMER_BUILD_DISTANCEFIELD_BLUR=r.Module.RC_TIMER_BUILD_DISTANCEFIELD_BLUR,s.RC_TIMER_BUILD_REGIONS=r.Module.RC_TIMER_BUILD_REGIONS,s.RC_TIMER_BUILD_REGIONS_WATERSHED=r.Module.RC_TIMER_BUILD_REGIONS_WATERSHED,s.RC_TIMER_BUILD_REGIONS_EXPAND=r.Module.RC_TIMER_BUILD_REGIONS_EXPAND,s.RC_TIMER_BUILD_REGIONS_FLOOD=r.Module.RC_TIMER_BUILD_REGIONS_FLOOD,s.RC_TIMER_BUILD_REGIONS_FILTER=r.Module.RC_TIMER_BUILD_REGIONS_FILTER,s.RC_TIMER_BUILD_LAYERS=r.Module.RC_TIMER_BUILD_LAYERS,s.RC_TIMER_BUILD_POLYMESHDETAIL=r.Module.RC_TIMER_BUILD_POLYMESHDETAIL,s.RC_TIMER_MERGE_POLYMESHDETAIL=r.Module.RC_TIMER_MERGE_POLYMESHDETAIL,s.RC_MAX_TIMERS=r.Module.RC_MAX_TIMERS,a.DT_FAILURE=r.Detour.FAILURE,a.DT_SUCCESS=r.Detour.SUCCESS,a.DT_IN_PROGRESS=r.Detour.IN_PROGRESS,a.DT_STATUS_DETAIL_MASK=r.Detour.STATUS_DETAIL_MASK,a.DT_WRONG_MAGIC=r.Detour.WRONG_MAGIC,a.DT_WRONG_VERSION=r.Detour.WRONG_VERSION,a.DT_OUT_OF_MEMORY=r.Detour.OUT_OF_MEMORY,a.DT_INVALID_PARAM=r.Detour.INVALID_PARAM,a.DT_BUFFER_TOO_SMALL=r.Detour.BUFFER_TOO_SMALL,a.DT_OUT_OF_NODES=r.Detour.OUT_OF_NODES,a.DT_PARTIAL_RESULT=r.Detour.PARTIAL_RESULT,a.DT_ALREADY_OCCUPIED=r.Detour.ALREADY_OCCUPIED,a.DT_VERTS_PER_POLYGON=r.Detour.VERTS_PER_POLYGON,a.DT_NAVMESH_MAGIC=r.Detour.NAVMESH_MAGIC,a.DT_NAVMESH_VERSION=r.Detour.NAVMESH_VERSION,a.DT_NAVMESH_STATE_MAGIC=r.Detour.NAVMESH_STATE_MAGIC,a.DT_NAVMESH_STATE_VERSION=r.Detour.NAVMESH_STATE_VERSION,a.DT_TILECACHE_MAGIC=r.Detour.TILECACHE_MAGIC,a.DT_TILECACHE_VERSION=r.Detour.TILECACHE_VERSION,a.DT_TILECACHE_NULL_AREA=r.Detour.TILECACHE_NULL_AREA,a.DT_TILECACHE_WALKABLE_AREA=r.Detour.TILECACHE_WALKABLE_AREA,a.DT_TILECACHE_NULL_IDX=r.Detour.TILECACHE_NULL_IDX,a.DT_NULL_LINK=r.Detour.NULL_LINK,a.DT_NULL_LINK=r.Detour.NULL_LINK,a.DT_EXT_LINK=r.Detour.EXT_LINK,a.DT_OFFMESH_CON_BIDIR=r.Detour.OFFMESH_CON_BIDIR,a.DT_STRAIGHTPATH_START=r.Module.DT_STRAIGHTPATH_START,a.DT_STRAIGHTPATH_END=r.Module.DT_STRAIGHTPATH_END,a.DT_STRAIGHTPATH_OFFMESH_CONNECTION=r.Module.DT_STRAIGHTPATH_OFFMESH_CONNECTION,a.DT_STRAIGHTPATH_AREA_CROSSINGS=r.Module.DT_STRAIGHTPATH_AREA_CROSSINGS,a.DT_STRAIGHTPATH_ALL_CROSSINGS=r.Module.DT_STRAIGHTPATH_ALL_CROSSINGS,a.DT_FINDPATH_ANY_ANGLE=r.Module.DT_FINDPATH_ANY_ANGLE,a.DT_RAYCAST_USE_COSTS=r.Module.DT_RAYCAST_USE_COSTS,a.DT_CROWDAGENT_STATE_INVALID=r.Module.DT_CROWDAGENT_STATE_INVALID,a.DT_CROWDAGENT_STATE_WALKING=r.Module.DT_CROWDAGENT_STATE_WALKING,a.DT_CROWDAGENT_STATE_OFFMESH=r.Module.DT_CROWDAGENT_STATE_OFFMESH,a.DT_CROWDAGENT_TARGET_NONE=r.Module.DT_CROWDAGENT_TARGET_NONE,a.DT_CROWDAGENT_TARGET_FAILED=r.Module.DT_CROWDAGENT_TARGET_FAILED,a.DT_CROWDAGENT_TARGET_VALID=r.Module.DT_CROWDAGENT_TARGET_VALID,a.DT_CROWDAGENT_TARGET_REQUESTING=r.Module.DT_CROWDAGENT_TARGET_REQUESTING,a.DT_CROWDAGENT_TARGET_WAITING_FOR_QUEUE=r.Module.DT_CROWDAGENT_TARGET_WAITING_FOR_QUEUE,a.DT_CROWDAGENT_TARGET_WAITING_FOR_PATH=r.Module.DT_CROWDAGENT_TARGET_WAITING_FOR_PATH,a.DT_CROWDAGENT_TARGET_VELOCITY=r.Module.DT_CROWDAGENT_TARGET_VELOCITY,a.DT_COMPRESSEDTILE_FREE_DATA=r.Module.DT_COMPRESSEDTILE_FREE_DATA,a.DT_TILE_FREE_DATA=r.Module.DT_TILE_FREE_DATA}};class n{get size(){return this.raw.size}constructor(e){this.raw=e}get(e){return this.raw.get(e)}set(e,t){this.raw.set(e,t)}resize(e){this.raw.resize(e)}copy(e){this.raw.resize(e.length);this.getHeapView().set(e)}destroy(){r.destroy(this.raw)}getHeapView(){const e=this.getHeap();return new this.typedArrayClass(e.buffer,this.raw.getDataPointer(),this.size)}toTypedArray(){const e=this.getHeapView(),t=new this.typedArrayClass(this.size);return t.set(e),t}}class o extends n{typedArrayClass=Int32Array;constructor(e){super(e??new r.Module.IntArray)}getHeap(){return r.Module.HEAP32}static fromRaw(e){return new this(e)}}class l extends n{typedArrayClass=Uint32Array;constructor(e){super(e??new r.Module.UnsignedIntArray)}getHeap(){return r.Module.HEAPU32}static fromRaw(e){return new this(e)}}class u extends n{typedArrayClass=Uint8Array;constructor(e){super(e??new r.Module.UnsignedCharArray)}getHeap(){return r.Module.HEAPU8}static fromRaw(e){return new this(e)}}class h extends n{typedArrayClass=Uint16Array;constructor(e){super(e??new r.Module.UnsignedShortArray)}getHeap(){return r.Module.HEAPU16}static fromRaw(e){return new this(e)}}class w extends n{typedArrayClass=Float32Array;constructor(e){super(e??new r.Module.FloatArray)}getHeap(){return r.Module.HEAPF32}static fromRaw(e){return new this(e)}}const c=w,_=o,d=u,R=o,g=u,T={toRaw:({x:e,y:t,z:s},a)=>a?(a.x=e,a.y=t,a.z=s,a):new r.Module.Vec3(e,t,s),fromRaw:e=>{const{x:t,y:r,z:s}=e;return{x:t,y:r,z:s}},fromArray:([e,t,r])=>({x:e,y:t,z:r}),toArray:({x:e,y:t,z:r})=>[e,t,r],lerp:(e,t,r,s={x:0,y:0,z:0})=>{s.x=e.x+(t.x-e.x)*r,s.y=e.y+(t.y-e.y)*r,s.z=e.z+(t.z-e.z)*r},copy:(e,t={x:0,y:0,z:0})=>{t.x=e.x,t.y=e.y,t.z=e.z}},E=(e,t)=>{const r=[];for(let s=0;s<t;s++)r.push(e(s));return r},A=e=>r.Detour.statusSucceed(e),y=e=>r.Detour.statusFailed(e),m=e=>r.Detour.statusInProgress(e),C=(e,t)=>r.Detour.statusDetail(e,t),M=e=>{if(r.Detour.statusSucceed(e))return"success";if(r.Detour.statusInProgress(e))return"in progress";if(r.Detour.statusFailed(e)){let t;const s={DT_WRONG_MAGIC:a.DT_WRONG_MAGIC,DT_WRONG_VERSION:a.DT_WRONG_VERSION,DT_OUT_OF_MEMORY:a.DT_OUT_OF_MEMORY,DT_INVALID_PARAM:a.DT_INVALID_PARAM,DT_BUFFER_TOO_SMALL:a.DT_BUFFER_TOO_SMALL,DT_OUT_OF_NODES:a.DT_OUT_OF_NODES,DT_PARTIAL_RESULT:a.DT_PARTIAL_RESULT,DT_ALREADY_OCCUPIED:a.DT_ALREADY_OCCUPIED};for(const[a,i]of Object.entries(s))if(r.Detour.statusDetail(e,i)){t=a;break}return t?`failed - ${t}`:"failed - unknown"}return"unknown"};class f{constructor(e){this.raw=e}vertBase(){return this.raw.vertBase}triBase(){return this.raw.triBase}vertCount(){return this.raw.vertCount}triCount(){return this.raw.triCount}}class p{constructor(e){this.raw=e}ref(){return this.raw.ref}next(){return this.raw.next}edge(){return this.raw.edge}side(){return this.raw.side}bmin(){return this.raw.bmin}bmax(){return this.raw.bmax}}class D{constructor(e){this.raw=e}bmin(){return T.fromArray(E((e=>this.raw.get_bmin(e)),3))}bmax(){return T.fromArray(E((e=>this.raw.get_bmax(e)),3))}i(){return this.raw.i}}class I{constructor(e){this.raw=e}pos(e){return this.raw.get_pos(e)}rad(){return this.raw.rad}poly(){return this.raw.poly}flags(){return this.raw.flags}side(){return this.raw.side}userId(){return this.raw.userId}}class S{constructor(e){this.raw=e}magic(){return this.raw.magic}version(){return this.raw.version}x(){return this.raw.x}y(){return this.raw.y}layer(){return this.raw.layer}userId(){return this.raw.userId}polyCount(){return this.raw.polyCount}vertCount(){return this.raw.vertCount}maxLinkCount(){return this.raw.maxLinkCount}detailMeshCount(){return this.raw.detailMeshCount}detailVertCount(){return this.raw.detailVertCount}detailTriCount(){return this.raw.detailTriCount}bvNodeCount(){return this.raw.bvNodeCount}offMeshConCount(){return this.raw.offMeshConCount}offMeshBase(){return this.raw.offMeshBase}walkableHeight(){return this.raw.walkableHeight}walkableRadius(){return this.raw.walkableRadius}walkableClimb(){return this.raw.walkableClimb}bmin(e){return this.raw.get_bmin(e)}bmax(e){return this.raw.get_bmax(e)}bvQuantFactor(){return this.raw.bvQuantFactor}}class P{constructor(e){this.raw=e}firstLink(){return this.raw.firstLink}verts(e){return this.raw.get_verts(e)}neis(e){return this.raw.get_neis(e)}flags(){return this.raw.flags}vertCount(){return this.raw.vertCount}areaAndType(){return this.raw.get_areaAndtype()}getType(){return this.raw.getType()}}class O{constructor(e){this.raw=e}salt(){return this.raw.salt}linksFreeList(){return this.raw.linksFreeList}header(){return r.isNull(this.raw.header)?null:new S(this.raw.header)}polys(e){return new P(this.raw.get_polys(e))}verts(e){return this.raw.get_verts(e)}links(e){return new p(this.raw.get_links(e))}detailMeshes(e){return new f(this.raw.get_detailMeshes(e))}detailVerts(e){return this.raw.get_detailVerts(e)}detailTris(e){return this.raw.get_detailTris(e)}bvTree(e){return new D(this.raw.get_bvTree(e))}offMeshCons(e){return new I(this.raw.get_offMeshCons(e))}data(e){return this.raw.get_data(e)}dataSize(){return this.raw.dataSize}flags(){return this.raw.flags}next(){return new O(this.raw.next)}}const L=e=>{const t=r.DetourNavMeshBuilder.createNavMeshData(e.raw);return{success:t.success,navMeshData:u.fromRaw(t.navMeshData)}};class x{constructor(e){this.raw=e??new r.Module.dtNavMeshCreateParams}setPolyMeshCreateParams(e){r.DetourNavMeshBuilder.setPolyMeshCreateParams(this.raw,e.raw)}setPolyMeshDetailCreateParams(e){r.DetourNavMeshBuilder.setPolyMeshDetailCreateParams(this.raw,e.raw)}setOffMeshConnections(e){if(e.length<=0)return;const t=[],s=[],a=[],i=[],n=[],o=[];for(let r=0;r<e.length;r++){const l=e[r];t.push(l.startPosition.x,l.startPosition.y,l.startPosition.z),t.push(l.endPosition.x,l.endPosition.y,l.endPosition.z),s.push(l.radius),a.push(l.bidirectional?1:0),i.push(l.area??0),n.push(l.flags??1),o.push(l.userId??1e3+r)}r.DetourNavMeshBuilder.setOffMeshConnections(this.raw,e.length,t,s,a,i,n,o)}verts(e){return this.raw.get_verts(e)}setVerts(e,t){this.raw.set_verts(e,t)}vertCount(){return this.raw.vertCount}polys(e){return this.raw.get_polys(e)}setPolys(e,t){this.raw.set_polys(e,t)}polyAreas(e){return this.raw.get_polyAreas(e)}setPolyAreas(e,t){this.raw.set_polyAreas(e,t)}polyFlags(e){return this.raw.get_polyFlags(e)}setPolyFlags(e,t){this.raw.set_polyFlags(e,t)}polyCount(){return this.raw.polyCount}nvp(){return this.raw.nvp}setNvp(e){this.raw.nvp=e}detailMeshes(e){return this.raw.get_detailMeshes(e)}setDetailMeshes(e,t){this.raw.set_detailMeshes(e,t)}detailVerts(e){return this.raw.get_detailVerts(e)}setDetailVerts(e,t){this.raw.set_detailVerts(e,t)}detailVertsCount(){return this.raw.detailVertsCount}detailTris(e){return this.raw.get_detailTris(e)}setDetailTris(e,t){this.raw.set_detailTris(e,t)}detailTriCount(){return this.raw.detailTriCount}offMeshConVerts(e){return this.raw.get_offMeshConVerts(e)}offMeshConRad(e){return this.raw.get_offMeshConRad(e)}offMeshConDir(e){return this.raw.get_offMeshConDir(e)}offMeshConAreas(e){return this.raw.get_offMeshConAreas(e)}offMeshConFlags(e){return this.raw.get_offMeshConFlags(e)}offMeshConUserID(e){return this.raw.get_offMeshConUserID(e)}offMeshConCount(){return this.raw.offMeshConCount}userId(){return this.raw.userId}tileX(){return this.raw.tileX}setTileX(e){this.raw.tileX=e}tileY(){return this.raw.tileY}setTileY(e){this.raw.tileY=e}tileLayer(){return this.raw.tileLayer}setTileLayer(e){this.raw.tileLayer=e}boundsMin(){return E((e=>this.raw.get_bmin(e)),3)}setBoundsMin(e){this.raw.set_bmin(0,e[0]),this.raw.set_bmin(1,e[1]),this.raw.set_bmin(2,e[2])}boundsMax(){return E((e=>this.raw.get_bmax(e)),3)}setBoundsMax(e){this.raw.set_bmax(0,e[0]),this.raw.set_bmax(1,e[1]),this.raw.set_bmax(2,e[2])}walkableHeight(){return this.raw.walkableHeight}setWalkableHeight(e){this.raw.walkableHeight=e}walkableRadius(){return this.raw.walkableRadius}setWalkableRadius(e){this.raw.walkableRadius=e}walkableClimb(){return this.raw.walkableClimb}setWalkableClimb(e){this.raw.walkableClimb=e}cellSize(){return this.raw.cs}setCellSize(e){this.raw.cs=e}cellHeight(){return this.raw.ch}setCellHeight(e){this.raw.ch=e}buildBvTree(){return this.raw.buildBvTree}setBuildBvTree(e){this.raw.buildBvTree=e}}class N{get includeFlags(){return this.raw.getIncludeFlags()}set includeFlags(e){this.raw.setIncludeFlags(e)}get excludeFlags(){return this.raw.getExcludeFlags()}set excludeFlags(e){this.raw.setExcludeFlags(e)}constructor(e){this.raw=e??new r.Module.dtQueryFilter}getAreaCost(e){return this.raw.getAreaCost(e)}setAreaCost(e,t){return this.raw.setAreaCost(e,t)}}class b{defaultQueryHalfExtents={x:1,y:1,z:1};constructor(e,t){e instanceof r.Module.NavMeshQuery?this.raw=e:(this.raw=new r.Module.NavMeshQuery,this.raw.init(e.raw,t?.maxNodes??2048)),t?.defaultQueryFilter?this.defaultFilter=t.defaultQueryFilter:(this.defaultFilter=new N,this.defaultFilter.includeFlags=65535,this.defaultFilter.excludeFlags=0)}findNearestPoly(e,t){const s=new r.UnsignedIntRef,a=new r.Vec3,i=new r.BoolRef,n=this.raw.findNearestPoly(T.toArray(e),T.toArray(t?.halfExtents??this.defaultQueryHalfExtents),t?.filter?.raw??this.defaultFilter.raw,s,a,i),o=T.fromRaw(a);r.destroy(a);const l=s.value;r.destroy(s);const u=i.value;return r.destroy(i),{success:A(n),status:n,nearestRef:l,nearestPoint:o,isOverPoly:u}}findPolysAroundCircle(e,t,s,a){const i=a?.filter??this.defaultFilter,n=a?.maxPolys??256,o=new l,u=new l,h=new w;o.resize(n),u.resize(n),h.resize(n);const c=new r.IntRef,_=this.raw.findPolysAroundCircle(e,T.toArray(t),s,i.raw,o.raw,u.raw,h.raw,c,n),d=[...o.getHeapView()];o.destroy();const R=[...u.getHeapView()];u.destroy();const g=[...h.getHeapView()];h.destroy();const E=c.value;return r.destroy(c),{success:A(_),status:_,resultRefs:d,resultParents:R,resultCost:g,resultCount:E}}queryPolygons(e,t,s){const a=s?.filter??this.defaultFilter,i=s?.maxPolys??256,n=new l;n.resize(i);const o=new r.IntRef,u=this.raw.queryPolygons(T.toArray(e),T.toArray(t),a.raw,n.raw,o,i),h=o.value;r.destroy(o);const w=[...n.getHeapView()];return n.destroy(),{success:A(u),status:u,polyRefs:w,polyCount:h}}closestPointOnPoly(e,t){const s=new r.Vec3,a=new r.BoolRef,i=this.raw.closestPointOnPoly(e,T.toArray(t),s,a),n=T.fromRaw(s);r.destroy(s);const o=a.value;return r.destroy(a),{success:A(i),status:i,closestPoint:n,isPointOverPoly:o}}findClosestPoint(e,t){const s=t?.filter??this.defaultFilter,a=t?.halfExtents??this.defaultQueryHalfExtents,i=new r.UnsignedIntRef,n=new r.Vec3,o=new r.BoolRef,l=this.raw.findClosestPoint(T.toArray(e),T.toArray(a),s.raw,i,n,o),u=i.value;r.destroy(i);const h=T.fromRaw(n);r.destroy(n);const w=o.value;return r.destroy(o),{success:A(l),status:l,polyRef:u,point:h,isPointOverPoly:w}}findRandomPointAroundCircle(e,t,s){const a=s?.filter??this.defaultFilter,i=s?.halfExtents??this.defaultQueryHalfExtents;let n;if(s?.startRef)n=s.startRef;else{const t=this.findNearestPoly(e,{filter:a,halfExtents:i});if(!t.success)return{success:!1,status:t.status,randomPolyRef:0,randomPoint:{x:0,y:0,z:0}};n=t.nearestRef}const o=new r.UnsignedIntRef,l=new r.Vec3,u=this.raw.findRandomPointAroundCircle(n,T.toArray(e),t,a.raw,o,l),h=o.value;r.destroy(o);const w=T.fromRaw(l);return r.destroy(l),{success:A(u),status:u,randomPolyRef:h,randomPoint:w}}moveAlongSurface(e,t,s,a){const i=a?.maxVisitedSize??256,n=new r.Vec3,o=new l,u=a?.filter?.raw??this.defaultFilter.raw,h=this.raw.moveAlongSurface(e,T.toArray(t),T.toArray(s),u,n,o.raw,i),w=T.fromRaw(n);r.destroy(n);const c=[...o.getHeapView()];return o.destroy(),{success:A(h),status:h,resultPosition:w,visited:c}}findRandomPoint(e){const t=new r.UnsignedIntRef,s=new r.Vec3,a=this.raw.findRandomPoint(e?.filter?.raw??this.defaultFilter.raw,t,s),i=t.value;r.destroy(t);const n=T.fromRaw(s);return r.destroy(s),{success:A(a),status:a,randomPolyRef:i,randomPoint:n}}getPolyHeight(e,t){const s=new r.FloatRef,a=this.raw.getPolyHeight(e,T.toArray(t),s),i=s.value;return r.destroy(s),{success:A(a),status:a,height:i}}computePath(e,t,r){const s=r?.filter??this.defaultFilter,a=r?.halfExtents??this.defaultQueryHalfExtents,i=this.findNearestPoly(e,{filter:s,halfExtents:a});if(!i.success)return{success:!1,error:{name:"findNearestPoly for start position failed",status:i.status},path:[]};const n=this.findNearestPoly(t,{filter:s,halfExtents:a});if(!n.success)return{success:!1,error:{name:"findNearestPoly for end position failed",status:n.status},path:[]};const o=i.nearestRef,l=n.nearestRef,u=r?.maxPathPolys??256,h=this.findPath(o,l,e,t,{filter:s,maxPathPolys:u});if(!h.success)return{success:!1,error:{name:"findPath unsuccessful",status:h.status},path:[]};if(h.polys.size<=0)return{success:!1,error:{name:"no polygon path found"},path:[]};const w=h.polys.get(h.polys.size-1);let c={x:t.x,y:t.y,z:t.z};if(w!==l){const e=this.closestPointOnPoly(w,t);if(!e.success)return{success:!1,error:{name:"no closest point on last polygon found",status:e.status},path:[]};c=e.closestPoint}const _=r?.maxStraightPathPoints,d=this.findStraightPath(e,c,h.polys,{maxStraightPathPoints:_});if(!d.success)return{success:!1,error:{name:"findStraightPath unsuccessful",status:d.status},path:[]};const{straightPath:R,straightPathCount:g}=d,T=[];for(let e=0;e<g;e++)T.push({x:R.get(3*e),y:R.get(3*e+1),z:R.get(3*e+2)});return h.polys.destroy(),d.straightPath.destroy(),d.straightPathFlags.destroy(),d.straightPathRefs.destroy(),{success:!0,path:T}}findPath(e,t,r,s,a){const i=a?.filter??this.defaultFilter,n=a?.maxPathPolys??256,o=new l;o.resize(n);const u=this.raw.findPath(e,t,T.toArray(r),T.toArray(s),i.raw,o.raw,n);return{success:A(u),status:u,polys:o}}findStraightPath(e,t,s,a){const i=a?.maxStraightPathPoints??256,n=a?.straightPathOptions??0;let o;Array.isArray(s)?(o=new l,o.copy(s)):o=s;const h=new w;h.resize(3*i);const c=new u;c.resize(i);const _=new l;_.resize(i);const d=new r.IntRef,R=this.raw.findStraightPath(T.toArray(e),T.toArray(t),o.raw,h.raw,c.raw,_.raw,d,i,n),g=d.value;return r.destroy(d),Array.isArray(s)&&o.destroy(),{success:A(R),status:R,straightPath:h,straightPathFlags:c,straightPathRefs:_,straightPathCount:g}}raycast(e,t,s,a){const i=new r.Module.dtRaycastHit,n=a?.raycastOptions??0,o=a?.prevRef??0,l=a?.filter?.raw??this.defaultFilter.raw,u=this.raw.raycast(e,T.toArray(t),T.toArray(s),l,n,i,o),h={success:A(u),status:u,t:i.t,hitNormal:T.fromArray(E((e=>i.get_hitNormal(e)),3)),hitEdgeIndex:i.hitEdgeIndex,path:E((e=>i.get_path(e)),i.pathCount),maxPath:i.maxPath,pathCost:i.pathCost};return r.destroy(i),h}destroy(){this.raw.destroy()}}const v={radius:.5,height:1,maxAcceleration:20,maxSpeed:6,collisionQueryRange:2.5,pathOptimizationRange:0,separationWeight:0,updateFlags:7,obstacleAvoidanceType:0,queryFilterType:0,userData:0};class F{get radius(){return this.raw.params.radius}set radius(e){this.raw.params.radius=e}get height(){return this.raw.params.height}set height(e){this.raw.params.height=e}get maxAcceleration(){return this.raw.params.maxAcceleration}set maxAcceleration(e){this.raw.params.maxAcceleration=e}get maxSpeed(){return this.raw.params.maxSpeed}set maxSpeed(e){this.raw.params.maxSpeed=e}get collisionQueryRange(){return this.raw.params.collisionQueryRange}set collisionQueryRange(e){this.raw.params.collisionQueryRange=e}get pathOptimizationRange(){return this.raw.params.pathOptimizationRange}set pathOptimizationRange(e){this.raw.params.pathOptimizationRange=e}get separationWeight(){return this.raw.params.separationWeight}set separationWeight(e){this.raw.params.separationWeight=e}get updateFlags(){return this.raw.params.updateFlags}set updateFlags(e){this.raw.params.updateFlags=e}get obstacleAvoidanceType(){return this.raw.params.obstacleAvoidanceType}set obstacleAvoidanceType(e){this.raw.params.obstacleAvoidanceType=e}get queryFilterType(){return this.raw.params.queryFilterType}set queryFilterType(e){this.raw.params.queryFilterType=e}get userData(){return this.raw.params.userData}set userData(e){this.raw.params.userData=e}interpolatedPosition={x:0,y:0,z:0};constructor(e,t){this.crowd=e,this.agentIndex=t,this.raw=e.raw.getEditableAgent(t),this.interpolatedPosition=this.position()}requestMoveTarget(e){const{nearestPoint:t,nearestRef:r}=this.crowd.navMeshQuery.findNearestPoly(e,{halfExtents:this.crowd.navMeshQuery.defaultQueryHalfExtents,filter:this.crowd.navMeshQuery.defaultFilter});return this.crowd.raw.requestMoveTarget(this.agentIndex,r,T.toArray(t))}requestMoveVelocity(e){return this.crowd.raw.requestMoveVelocity(this.agentIndex,T.toArray(e))}resetMoveTarget(){this.crowd.raw.resetMoveTarget(this.agentIndex)}teleport(e){r.CrowdUtils.agentTeleport(this.crowd.raw,this.agentIndex,T.toArray(e),T.toArray(this.crowd.navMeshQuery.defaultQueryHalfExtents),this.crowd.navMeshQuery.defaultFilter.raw),T.copy(e,this.interpolatedPosition)}position(){return{x:this.raw.get_npos(0),y:this.raw.get_npos(1),z:this.raw.get_npos(2)}}velocity(){return{x:this.raw.get_vel(0),y:this.raw.get_vel(1),z:this.raw.get_vel(2)}}desiredVelocity(){return{x:this.raw.get_dvel(0),y:this.raw.get_dvel(1),z:this.raw.get_dvel(2)}}desiredVelocityObstacleAdjusted(){return{x:this.raw.get_nvel(0),y:this.raw.get_nvel(1),z:this.raw.get_nvel(2)}}state(){return this.raw.state}target(){return{x:this.raw.get_targetPos(0),y:this.raw.get_targetPos(1),z:this.raw.get_targetPos(2)}}nextTargetInPath(){return{x:this.raw.get_cornerVerts(0),y:this.raw.get_cornerVerts(1),z:this.raw.get_cornerVerts(2)}}corners(){const e=[];for(let t=0;t<this.raw.ncorners;t++)e.push({x:this.raw.get_cornerVerts(3*t),y:this.raw.get_cornerVerts(3*t+1),z:this.raw.get_cornerVerts(3*t+2)});return e}parameters(){const{params:e}=this.raw;return{radius:e.radius,height:e.height,maxAcceleration:e.maxAcceleration,maxSpeed:e.maxSpeed,collisionQueryRange:e.collisionQueryRange,pathOptimizationRange:e.pathOptimizationRange,separationWeight:e.separationWeight,updateFlags:e.updateFlags,obstacleAvoidanceType:e.obstacleAvoidanceType,queryFilterType:e.queryFilterType,userData:e.userData}}updateParameters(e){const t={...this.parameters(),...e};this.setParameters(t)}setParameters(e){const t={...v,...e},s=new r.Module.dtCrowdAgentParams;s.radius=t.radius,s.height=t.height,s.maxAcceleration=t.maxAcceleration,s.maxSpeed=t.maxSpeed,s.collisionQueryRange=t.collisionQueryRange,s.pathOptimizationRange=t.pathOptimizationRange,s.separationWeight=t.separationWeight,s.updateFlags=t.updateFlags,s.obstacleAvoidanceType=t.obstacleAvoidanceType,s.queryFilterType=t.queryFilterType,s.userData=t.userData,this.crowd.raw.updateAgentParameters(this.agentIndex,s)}overOffMeshConnection(){return r.CrowdUtils.overOffMeshConnection(this.crowd.raw,this.agentIndex)}}class U{agents={};accumulator=0;constructor(e,{maxAgents:t,maxAgentRadius:s}){this.navMesh=e,this.raw=r.Detour.allocCrowd(),this.raw.init(t,s,e.raw.getNavMesh()),this.navMeshQuery=new b(new r.Module.NavMeshQuery(this.raw.getNavMeshQuery()))}update(e,t,r=10){if(void 0===t)this.raw.update(e,void 0);else{this.accumulator+=t;let s=0;for(;this.accumulator>=e&&s<r;)this.raw.update(e,void 0),this.accumulator-=e,s++;const a=this.accumulator%e/e,i=this.getAgents();for(const e of i)T.lerp(e.interpolatedPosition,e.position(),a,e.interpolatedPosition)}}addAgent(e,t){const s={...v,...t},a=new r.Module.dtCrowdAgentParams;a.radius=s.radius,a.height=s.height,a.maxAcceleration=s.maxAcceleration,a.maxSpeed=s.maxSpeed,a.collisionQueryRange=s.collisionQueryRange,a.pathOptimizationRange=s.pathOptimizationRange,a.separationWeight=s.separationWeight,a.updateFlags=s.updateFlags,a.obstacleAvoidanceType=s.obstacleAvoidanceType,a.queryFilterType=s.queryFilterType,a.userData=s.userData;const i=this.raw.addAgent(T.toArray(e),a),n=new F(this,i);return this.agents[i]=n,n}getAgent(e){const t=this.agents[e];return t||null}removeAgent(e){const t="number"==typeof e?e:e.agentIndex;this.raw.removeAgent(t),delete this.agents[t]}getAgentCount(){return this.raw.getAgentCount()}getActiveAgentCount(){return r.CrowdUtils.getActiveAgentCount(this.raw)}getAgents(){return Object.values(this.agents)}getFilter(e){return new N(this.raw.getEditableFilter(e))}destroy(){r.Detour.freeCrowd(this.raw)}}class H{constructor(e){this.raw=e}tiles(e){return new O(this.raw.get_tiles(e))}tileCount(){return this.raw.tileCount}}class G{constructor(e){this.raw=e}data(){return E((e=>this.raw.get_data(e)),this.raw.dataSize)}dataSize(){return this.raw.dataSize}}class B{constructor(e){this.raw=e}tileX(){return this.raw.tileX}tileY(){return this.raw.tileY}}class z{constructor(e){this.raw=e}data(){return E((e=>this.raw.get_data(e)),this.raw.dataSize)}dataSize(){return this.raw.dataSize}}class V{constructor(e){this.raw=e}static create(e){const t=new r.Module.dtNavMeshParams;return t.set_orig(0,e.orig.x),t.set_orig(1,e.orig.y),t.set_orig(2,e.orig.z),t.tileWidth=e.tileWidth,t.tileHeight=e.tileHeight,t.maxTiles=e.maxTiles,t.maxPolys=e.maxPolys,new V(t)}clone(){return V.create({orig:{x:this.raw.get_orig(0),y:this.raw.get_orig(1),z:this.raw.get_orig(2)},tileWidth:this.raw.tileWidth,tileHeight:this.raw.tileHeight,maxTiles:this.raw.maxTiles,maxPolys:this.raw.maxPolys})}}class k{constructor(e){this.raw=e??new r.Module.NavMesh}initSolo(e){return this.raw.initSolo(e.raw)}initTiled(e){return this.raw.initTiled(e.raw)}addTile(e,t,s){const a=new r.UnsignedIntRef,i=this.raw.addTile(e.raw,t,s,a),n=a.value;return r.destroy(a),{status:i,tileRef:n}}decodePolyId(e){const t=new r.UnsignedIntRef,s=new r.UnsignedIntRef,a=new r.UnsignedIntRef;this.raw.decodePolyId(e,t,s,a);const i=t.value;r.destroy(t);const n=s.value;r.destroy(s);const o=a.value;return r.destroy(a),{tileSalt:i,tileIndex:n,tilePolygonIndex:o}}encodePolyId(e,t,r){return this.raw.encodePolyId(e,t,r)}removeTile(e){return new G(this.raw.removeTile(e))}calcTileLoc(e){return new B(this.raw.calcTileLoc(T.toArray(e)))}getTileAt(e,t,s){const a=this.raw.getTileAt(e,t,s);return r.isNull(a)?null:new O(a)}getTilesAt(e,t,r){return new H(this.raw.getTilesAt(e,t,r))}getTileRefAt(e,t,r){return this.raw.getTileRefAt(e,t,r)}getTileRef(e){return this.raw.getTileRef(e.raw)}getTileByRef(e){const t=this.raw.getTileByRef(e);return r.isNull(t)?null:new O(t)}getMaxTiles(){return this.raw.getMaxTiles()}getTile(e){return new O(this.raw.getTile(e))}getTileAndPolyByRef(e){const t=this.raw.getTileAndPolyByRef(e),r=new O(t.tile),s=new P(t.poly);return{success:A(t.status),status:t.status,tile:r,poly:s}}getTileAndPolyByRefUnsafe(e){const t=this.raw.getTileAndPolyByRef(e);return{tile:new O(t.tile),poly:new P(t.poly)}}isValidPolyRef(e){return this.raw.isValidPolyRef(e)}getPolyRefBase(e){return this.raw.getPolyRefBase(e.raw)}getOffMeshConnectionPolyEndPoints(e,t){const s=new r.Vec3,a=new r.Vec3,i=this.raw.getOffMeshConnectionPolyEndPoints(e,t,s,a),n=T.fromRaw(s);r.destroy(s);const o=T.fromRaw(a);return r.destroy(a),{success:A(i),status:i,start:n,end:o}}getOffMeshConnectionByRef(e){return new I(this.raw.getOffMeshConnectionByRef(e))}setPolyFlags(e,t){return this.raw.setPolyFlags(e,t)}getPolyFlags(e){const t=new r.UnsignedShortRef,s=this.raw.getPolyFlags(e,t),a=t.value;return r.destroy(t),{status:s,flags:a}}setPolyArea(e,t){return this.raw.setPolyArea(e,t)}getPolyArea(e){const t=new r.UnsignedCharRef,s=this.raw.getPolyArea(e,t),a=t.value;return r.destroy(t),{status:s,area:a}}getTileStateSize(e){return this.raw.getTileStateSize(e.raw)}storeTileState(e,t){return new z(this.raw.storeTileState(e.raw,t))}restoreTileState(e,t,r){return this.raw.restoreTileState(e.raw,t,r)}getDebugNavMesh(){const e=[],t=[];let r=0;const s=this.getMaxTiles();for(let a=0;a<s;a++){const s=this.getTile(a),i=s.header();if(!i)continue;const n=i.polyCount();for(let a=0;a<n;++a){const i=s.polys(a);if(1===i.getType())continue;const n=i.vertCount(),o=s.detailMeshes(a),l=o.triBase(),u=o.triCount();for(let a=0;a<u;++a){const u=4*(l+a);for(let a=0;a<3;++a){if(s.detailTris(u+a)<n){const t=3*i.verts(s.detailTris(u+a));e.push(s.verts(t),s.verts(t+1),s.verts(t+2))}else{const t=3*(o.vertBase()+s.detailTris(u+a)-i.vertCount());e.push(s.detailVerts(t),s.detailVerts(t+1),s.detailVerts(t+2))}t.push(r++)}}}}return[e,t]}destroy(){this.raw.destroy(),r.Module.destroy(this.raw)}}const W=()=>r.Module.FastRand.prototype.getSeed(),Y=e=>{r.Module.FastRand.prototype.setSeed(e)},Q={borderSize:0,tileSize:0,cs:.2,ch:.2,walkableSlopeAngle:60,walkableHeight:2,walkableClimb:2,walkableRadius:.5,maxEdgeLen:12,maxSimplificationError:1.3,minRegionArea:8,mergeRegionArea:20,maxVertsPerPoly:6,detailSampleDist:6,detailSampleMaxError:1},K=e=>{const t={...Q,...e},s=new r.Module.rcConfig;return s.borderSize=t.borderSize,s.tileSize=t.tileSize,s.cs=t.cs,s.ch=t.ch,s.walkableSlopeAngle=t.walkableSlopeAngle,s.walkableHeight=t.walkableHeight,s.walkableClimb=t.walkableClimb,s.walkableRadius=t.walkableRadius,s.maxEdgeLen=t.maxEdgeLen,s.maxSimplificationError=t.maxSimplificationError,s.minRegionArea=t.minRegionArea,s.mergeRegionArea=t.mergeRegionArea,s.maxVertsPerPoly=t.maxVertsPerPoly,s.detailSampleDist=t.detailSampleDist,s.detailSampleMaxError=t.detailSampleMaxError,s},X=e=>{const t=new r.Module.rcConfig;return t.set_bmin(0,e.get_bmin(0)),t.set_bmin(1,e.get_bmin(1)),t.set_bmin(2,e.get_bmin(2)),t.set_bmax(0,e.get_bmax(0)),t.set_bmax(1,e.get_bmax(1)),t.set_bmax(2,e.get_bmax(2)),t.width=e.width,t.height=e.height,t.borderSize=e.borderSize,t.tileSize=e.tileSize,t.cs=e.cs,t.ch=e.ch,t.walkableSlopeAngle=e.walkableSlopeAngle,t.walkableHeight=e.walkableHeight,t.walkableClimb=e.walkableClimb,t.walkableRadius=e.walkableRadius,t.maxEdgeLen=e.maxEdgeLen,t.maxSimplificationError=e.maxSimplificationError,t.minRegionArea=e.minRegionArea,t.mergeRegionArea=e.mergeRegionArea,t.maxVertsPerPoly=e.maxVertsPerPoly,t.detailSampleDist=e.detailSampleDist,t.detailSampleMaxError=e.detailSampleMaxError,t};class q{logs=[];startTimes={};accumulatedTimes={};constructor(e=!0){const t=new r.Module.RecastBuildContextImpl;t.log=(e,t,s)=>{if(!this.raw.logEnabled())return;const a=t,i=new Uint8Array(r.Module.HEAPU8.buffer,a,s),n=new Uint8Array(s);n.set(i);const o=(new TextDecoder).decode(n);this.log(e,o)},t.resetLog=()=>{this.resetLog()},t.startTimer=e=>{this.raw.timerEnabled()&&this.startTimer(e)},t.stopTimer=e=>{this.raw.timerEnabled()&&this.stopTimer(e)},t.getAccumulatedTime=e=>this.raw.timerEnabled()?this.getAccumulatedTime(e):-1,t.resetTimers=()=>{this.raw.timerEnabled()&&(this.startTimes={},this.accumulatedTimes={})},this.raw=new r.Module.RecastBuildContext(t),this.raw.enableTimer(e),this.raw.enableLog(e),this.resetTimers()}log(e,t){this.logs.push({category:e,msg:t})}resetLog(){this.logs=[]}startTimer(e){this.startTimes[e]=performance.now()}stopTimer(e){const t=performance.now()-this.startTimes[e];-1===this.accumulatedTimes[e]?this.accumulatedTimes[e]=t:this.accumulatedTimes[e]+=t}getAccumulatedTime(e){return this.accumulatedTimes[e]}resetTimers(){for(let e=0;e<s.RC_MAX_TIMERS;e++)this.startTimes[e]=-1,this.accumulatedTimes[e]=-1}}class j{constructor(e){this.raw=e??new r.rcChunkyTriMesh}init(e,t,s,a){return r.ChunkyTriMeshUtils.createChunkyTriMesh(e.raw,t.raw,s,a,this.raw)}getChunksOverlappingRect(e,t,s,a){return r.ChunkyTriMeshUtils.getChunksOverlappingRect(this.raw,e,t,s.raw,a)}getNodeTris(e){return o.fromRaw(r.ChunkyTriMeshUtils.getChunkyTriMeshNodeTris(this.raw,e))}nodes(e){return this.raw.get_nodes(e)}maxTrisPerChunk(){return this.raw.maxTrisPerChunk}}class Z{constructor(e){this.raw=e}smin(){return this.raw.smin}smax(){return this.raw.smax}area(){return this.raw.area}next(){return r.isNull(this.raw.next)?null:new Z(this.raw.next)}}class ${constructor(e){this.raw=e}next(){return r.isNull(this.raw.next)?null:new $(this.raw.next)}items(e){return new Z(this.raw.get_items(e))}}class J{constructor(e){this.raw=e}width(){return this.raw.width}height(){return this.raw.height}bmin(){return T.fromArray(E((e=>this.raw.get_bmin(e)),3))}bmax(){return T.fromArray(E((e=>this.raw.get_bmax(e)),3))}cs(){return this.raw.cs}ch(){return this.raw.ch}spans(e){return new Z(this.raw.get_spans(e))}pools(e){return new $(this.raw.get_pools(e))}freelist(e){return new Z(this.raw.get_freelist(e))}}class ee{constructor(e){this.raw=e}index(){return this.raw.get_index()}count(){return this.raw.get_count()}}class te{constructor(e){this.raw=e}y(){return this.raw.get_y()}reg(){return this.raw.get_reg()}con(){return this.raw.get_con()}h(){return this.raw.get_h()}}class re{constructor(e){this.raw=e}width(){return this.raw.width}height(){return this.raw.height}spanCount(){return this.raw.spanCount}walkableHeight(){return this.raw.walkableHeight}walkableClimb(){return this.raw.walkableClimb}borderSize(){return this.raw.borderSize}maxDistance(){return this.raw.maxDistance}maxRegions(){return this.raw.maxRegions}bmin(){return T.fromArray(E((e=>this.raw.get_bmin(e)),3))}bmax(){return T.fromArray(E((e=>this.raw.get_bmax(e)),3))}cs(){return this.raw.cs}ch(){return this.raw.ch}cells(e){return new ee(this.raw.get_cells(e))}spans(e){return new te(this.raw.get_spans(e))}dist(e){return this.raw.get_dist(e)}areas(e){return this.raw.get_areas(e)}}class se{constructor(e){this.raw=e}verts(e){return this.raw.get_verts(e)}nverts(){return this.raw.nverts}rverts(e){return this.raw.get_rverts(e)}nrverts(){return this.raw.nrverts}reg(){return this.raw.reg}area(){return this.raw.area}}class ae{constructor(e){this.raw=e}conts(e){return new se(this.raw.get_conts(e))}nconts(){return this.raw.nconts}bmin(){return T.fromArray(E((e=>this.raw.get_bmin(e)),3))}bmax(){return T.fromArray(E((e=>this.raw.get_bmax(e)),3))}cs(){return this.raw.cs}ch(){return this.raw.ch}width(){return this.raw.width}height(){return this.raw.height}borderSize(){return this.raw.borderSize}maxError(){return this.raw.maxError}}class ie{constructor(e){this.raw=e}bmin(){return T.fromArray(E((e=>this.raw.get_bmin(e)),3))}bmax(){return T.fromArray(E((e=>this.raw.get_bmax(e)),3))}cs(){return this.raw.cs}ch(){return this.raw.ch}width(){return this.raw.width}height(){return this.raw.height}minx(){return this.raw.minx}maxx(){return this.raw.maxx}miny(){return this.raw.miny}maxy(){return this.raw.maxy}hmin(){return this.raw.hmin}hmax(){return this.raw.hmax}heights(e){return this.raw.get_heights(e)}areas(e){return this.raw.get_areas(e)}cons(e){return this.raw.get_cons(e)}}class ne{constructor(e){this.raw=e}layers(e){return new ie(this.raw.get_layers(e))}nlayers(){return this.raw.nlayers}}class oe{constructor(e){this.raw=e}verts(e){return this.raw.get_verts(e)}polys(e){return this.raw.get_polys(e)}regs(e){return this.raw.get_regs(e)}flags(e){return this.raw.get_flags(e)}setFlags(e,t){this.raw.set_flags(e,t)}areas(e){return this.raw.get_areas(e)}setAreas(e,t){return this.raw.set_areas(e,t)}nverts(){return this.raw.nverts}npolys(){return this.raw.npolys}maxpolys(){return this.raw.maxpolys}nvp(){return this.raw.nvp}bmin(){return T.fromArray(E((e=>this.raw.get_bmin(e)),3))}bmax(){return T.fromArray(E((e=>this.raw.get_bmax(e)),3))}cs(){return this.raw.cs}ch(){return this.raw.ch}borderSize(){return this.raw.borderSize}maxEdgeError(){return this.raw.maxEdgeError}}class le{constructor(e){this.raw=e}meshes(e){return this.raw.get_meshes(e)}verts(e){return this.raw.get_verts(e)}tris(e){return this.raw.get_tris(e)}nmeshes(){return this.raw.nmeshes}nverts(){return this.raw.nverts}ntris(){return this.raw.ntris}}const ue=(e,t)=>r.Recast.calcBounds(e.raw,t),he=(e,t,s)=>r.Recast.calcGridSize(e,t,s),we=(e,t,s,a,i,n,o,l)=>r.Recast.createHeightfield(e.raw,t.raw,s,a,i,n,o,l),ce=(e,t,s,a,i,n,o)=>r.Recast.markWalkableTriangles(e.raw,t,s.raw,a,i.raw,n,o.raw),_e=(e,t,s,a,i,n,o)=>r.Recast.clearUnwalkableTriangles(e.raw,t,s.raw,a,i.raw,n,o.raw),de=(e,t,s,a,i,n,o,l=1)=>r.Recast.rasterizeTriangles(e.raw,t.raw,s,a.raw,i.raw,n,o.raw,l),Re=(e,t,s)=>r.Recast.filterLowHangingWalkableObstacles(e.raw,t,s.raw),ge=(e,t,s,a)=>r.Recast.filterLedgeSpans(e.raw,t,s,a.raw),Te=(e,t,s)=>r.Recast.filterWalkableLowHeightSpans(e.raw,t,s.raw),Ee=(e,t)=>r.Recast.getHeightFieldSpanCount(e.raw,t.raw),Ae=(e,t,s,a,i)=>r.Recast.buildCompactHeightfield(e.raw,t,s,a.raw,i.raw),ye=(e,t,s)=>r.Recast.erodeWalkableArea(e.raw,t,s.raw),me=(e,t)=>r.Recast.medianFilterWalkableArea(e.raw,t.raw),Ce=(e,t,s,a,i)=>r.Recast.markBoxArea(e.raw,t,s,a,i.raw),Me=(e,t,s,a,i,n,o)=>r.Recast.markConvexPolyArea(e.raw,t.raw,s,a,i,n,o.raw),fe=(e,t,s,a,i,n)=>r.Recast.markCylinderArea(e.raw,t,s,a,i,n.raw),pe=(e,t)=>r.Recast.buildDistanceField(e.raw,t.raw),De=(e,t,s,a,i)=>r.Recast.buildRegions(e.raw,t.raw,s,a,i),Ie=(e,t,s,a)=>r.Recast.buildLayerRegions(e.raw,t.raw,s,a),Se=(e,t,s,a,i)=>r.Recast.buildRegionsMonotone(e.raw,t.raw,s,a,i),Pe=(e,t,s)=>r.Recast.setCon(e.raw,t,s),Oe=(e,t)=>r.Recast.getCon(e.raw,t),Le=e=>r.Recast.getDirOffsetX(e),xe=e=>r.Recast.getDirOffsetY(e),Ne=(e,t)=>r.Recast.getDirForOffset(e,t),be=(e,t,s,a,i)=>r.Recast.buildHeightfieldLayers(e.raw,t.raw,s,a,i.raw),ve=(e,t,a,i,n,o=s.RC_CONTOUR_TESS_WALL_EDGES)=>r.Recast.buildContours(e.raw,t.raw,a,i,n.raw,o),Fe=(e,t,s,a)=>r.Recast.buildPolyMesh(e.raw,t.raw,s,a.raw),Ue=(e,t,s)=>r.Recast.mergePolyMeshes(e.raw,t.map((e=>e.raw)),t.length,s.raw),He=(e,t,s,a,i,n)=>r.Recast.buildPolyMeshDetail(e.raw,t.raw,s.raw,a,i,n.raw),Ge=(e,t,s)=>r.Recast.copyPolyMesh(e.raw,t.raw,s.raw),Be=(e,t,s)=>r.Recast.mergePolyMeshDetails(e.raw,t.map((e=>e.raw)),t.length,s.raw),ze=e=>u.fromRaw(r.Recast.getHeightfieldLayerHeights(e.raw)),Ve=e=>u.fromRaw(r.Recast.getHeightfieldLayerAreas(e.raw)),ke=e=>u.fromRaw(r.Recast.getHeightfieldLayerCons(e.raw)),We=()=>new J(r.Recast.allocHeightfield()),Ye=e=>r.Recast.freeHeightfield(e.raw),Qe=()=>new re(r.Recast.allocCompactHeightfield()),Ke=e=>r.Recast.freeCompactHeightfield(e.raw),Xe=()=>new ne(r.Recast.allocHeightfieldLayerSet()),qe=e=>r.Recast.freeHeightfieldLayerSet(e.raw),je=()=>new ae(r.Recast.allocContourSet()),Ze=e=>r.Recast.freeContourSet(e.raw),$e=()=>new oe(r.Recast.allocPolyMesh()),Je=e=>r.Recast.freePolyMesh(e.raw),et=()=>new le(r.Recast.allocPolyMeshDetail()),tt=e=>r.Recast.freePolyMeshDetail(e.raw),rt=(e,t)=>{const s=r.NavMeshExporter.exportNavMesh(e.raw,t?.raw),a=new Uint8Array(r.Module.HEAPU8.buffer,s.dataPointer,s.size),i=new Uint8Array(s.size);return i.set(a),r.NavMeshExporter.freeNavMeshExport(s),i},st=e=>rt(e),at=(e,t)=>rt(e,t);class it{constructor(e){this.raw=e}static create(e){const t=new r.Module.dtTileCacheParams;return t.set_orig(0,e.orig[0]),t.set_orig(1,e.orig[1]),t.set_orig(2,e.orig[2]),t.set_cs(e.cs),t.set_ch(e.ch),t.set_width(e.width),t.set_height(e.height),t.set_walkableHeight(e.walkableHeight),t.set_walkableRadius(e.walkableRadius),t.set_walkableClimb(e.walkableClimb),t.set_maxSimplificationError(e.maxSimplificationError),t.set_maxTiles(e.maxTiles),t.set_maxObstacles(e.maxObstacles),new it(t)}}class nt{obstacles=new Map;constructor(e){this.raw=e??new r.Module.TileCache}init(e,t,r,s){return this.raw.init(e.raw,t,r,s.raw)}update(e){const{status:t,upToDate:r}=this.raw.update(e.raw);return{success:A(t),status:t,upToDate:r}}addCylinderObstacle(e,t,r){const s=this.raw.addCylinderObstacle(T.toRaw(e),t,r);if(s.status!==a.DT_SUCCESS)return{success:!1,status:s.status};const i=s.ref,n={type:"cylinder",ref:i,position:e,radius:t,height:r};return this.obstacles.set(i,n),{success:!0,status:s.status,obstacle:n}}addBoxObstacle(e,t,s){const i=T.toRaw(e),n=T.toRaw(t),o=this.raw.addBoxObstacle(i,n,s);if(r.destroy(i),r.destroy(n),o.status!==a.DT_SUCCESS)return{success:!1,status:o.status};const l=o.ref,u={type:"box",ref:l,position:e,halfExtents:t,angle:s};return this.obstacles.set(l,u),{success:!0,status:o.status,obstacle:u}}removeObstacle(e){let t;t="object"==typeof e?e.ref:e,this.obstacles.delete(t);const r=this.raw.removeObstacle(t);return{success:A(r),status:r}}addTile(e,t=a.DT_COMPRESSEDTILE_FREE_DATA){return this.raw.addTile(e.raw,t)}buildNavMeshTile(e,t){return this.raw.buildNavMeshTile(e,t.raw)}buildNavMeshTilesAt(e,t,r){return this.raw.buildNavMeshTilesAt(e,t,r.raw)}destroy(){this.raw.destroy()}}class ot{constructor(e){this.raw=new r.Module.TileCacheMeshProcess,this.raw.process=(t,s,a)=>{const i=new x(r.Module.wrapPointer(t,r.Module.dtNavMeshCreateParams)),n=r.Module.wrapPointer(s,r.Module.UnsignedCharArray),o=r.Module.wrapPointer(a,r.Module.UnsignedShortArray);e(i,u.fromRaw(n),h.fromRaw(o))}}}const lt=(e,t,s,a,i,n)=>r.DetourTileCacheBuilder.buildTileCacheLayer(e,t,s.raw,a.raw,i.raw,n.raw),ut=e=>{const t=e.length*e.BYTES_PER_ELEMENT,s=r.Module._malloc(t),a=new Uint8Array(r.Module.HEAPU8.buffer,s,t);a.set(e);const i=new r.Module.NavMeshExport;return i.dataPointer=a.byteOffset,i.size=e.length,{navMeshExport:i,dataHeap:a}},ht=e=>{const{navMeshExport:t,dataHeap:s}=ut(e),a=r.NavMeshImporter.importNavMesh(t,void 0);r.Module._free(s.byteOffset);return{navMesh:new k(a.navMesh)}},wt=(e,t)=>{const{navMeshExport:s,dataHeap:a}=ut(e),i=r.NavMeshImporter.importNavMesh(s,t.raw);r.Module._free(a.byteOffset);return{navMesh:new k(i.navMesh),tileCache:new nt(i.tileCache),allocator:i.allocator,compressor:i.compressor}};export{R as ChunkIdsArray,U as Crowd,F as CrowdAgent,a as Detour,D as DetourBVNode,p as DetourLink,S as DetourMeshHeader,O as DetourMeshTile,I as DetourOffMeshConnection,P as DetourPoly,f as DetourPolyDetail,it as DetourTileCacheParams,w as FloatArray,o as IntArray,k as NavMesh,B as NavMeshCalcTileLocResult,x as NavMeshCreateParams,H as NavMeshGetTilesAtResult,V as NavMeshParams,b as NavMeshQuery,G as NavMeshRemoveTileResult,z as NavMeshStoreTileStateResult,N as QueryFilter,r as Raw,s as Recast,q as RecastBuildContext,j as RecastChunkyTriMesh,ee as RecastCompactCell,re as RecastCompactHeightfield,te as RecastCompactSpan,se as RecastContour,ae as RecastContourSet,J as RecastHeightfield,ie as RecastHeightfieldLayer,ne as RecastHeightfieldLayerSet,oe as RecastPolyMesh,le as RecastPolyMeshDetail,Z as RecastSpan,$ as RecastSpanPool,nt as TileCache,g as TileCacheData,ot as TileCacheMeshProcess,d as TriangleAreasArray,_ as TrianglesArray,u as UnsignedCharArray,l as UnsignedIntArray,h as UnsignedShortArray,c as VerticesArray,Qe as allocCompactHeightfield,je as allocContourSet,We as allocHeightfield,Xe as allocHeightfieldLayerSet,$e as allocPolyMesh,et as allocPolyMeshDetail,E as array,Ae as buildCompactHeightfield,ve as buildContours,pe as buildDistanceField,be as buildHeightfieldLayers,Ie as buildLayerRegions,Fe as buildPolyMesh,He as buildPolyMeshDetail,De as buildRegions,Se as buildRegionsMonotone,lt as buildTileCacheLayer,ue as calcBounds,he as calcGridSize,_e as clearUnwalkableTriangles,X as cloneRcConfig,Ge as copyPolyMesh,we as createHeightfield,L as createNavMeshData,K as createRcConfig,v as crowdAgentParamsDefaults,ye as erodeWalkableArea,st as exportNavMesh,at as exportTileCache,ge as filterLedgeSpans,Re as filterLowHangingWalkableObstacles,Te as filterWalkableLowHeightSpans,Ke as freeCompactHeightfield,Ze as freeContourSet,Ye as freeHeightfield,qe as freeHeightfieldLayerSet,Je as freePolyMesh,tt as freePolyMeshDetail,Oe as getCon,Ne as getDirForOffset,Le as getDirOffsetX,xe as getDirOffsetY,Ee as getHeightFieldSpanCount,Ve as getHeightfieldLayerAreas,ke as getHeightfieldLayerCons,ze as getHeightfieldLayerHeights,W as getRandomSeed,ht as importNavMesh,wt as importTileCache,i as init,Ce as markBoxArea,Me as markConvexPolyArea,fe as markCylinderArea,ce as markWalkableTriangles,me as medianFilterWalkableArea,Be as mergePolyMeshDetails,Ue as mergePolyMeshes,de as rasterizeTriangles,Q as recastConfigDefaults,Pe as setCon,Y as setRandomSeed,C as statusDetail,y as statusFailed,m as statusInProgress,A as statusSucceed,M as statusToReadableString,T as vec3};
//# sourceMappingURL=index.mjs.map
